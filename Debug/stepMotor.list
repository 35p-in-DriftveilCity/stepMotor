
stepMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c2c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003dcc  08003dcc  00013dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e1c  08003e1c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003e1c  08003e1c  00013e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e24  08003e24  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e24  08003e24  00013e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e28  08003e28  00013e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003e2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000068  08003e94  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  08003e94  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c2fb  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e19  00000000  00000000  0002c3d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba8  00000000  00000000  0002e1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000907  00000000  00000000  0002ed98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000172bf  00000000  00000000  0002f69f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d8fd  00000000  00000000  0004695e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fa61  00000000  00000000  0005425b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000037e0  00000000  00000000  000e3cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000e749c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003db4 	.word	0x08003db4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003db4 	.word	0x08003db4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000588:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	2b00      	cmp	r3, #0
 8000592:	d013      	beq.n	80005bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800059c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d00b      	beq.n	80005bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005a4:	e000      	b.n	80005a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0f9      	beq.n	80005a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	b2d2      	uxtb	r2, r2
 80005ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005bc:	687b      	ldr	r3, [r7, #4]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
	...

080005cc <delayUs>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delayUs(uint16_t time){
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
	htim11.Instance->CNT = 0;
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <delayUs+0x30>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2200      	movs	r2, #0
 80005dc:	625a      	str	r2, [r3, #36]	; 0x24
	while(htim11.Instance->CNT < time);
 80005de:	bf00      	nop
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <delayUs+0x30>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d3f9      	bcc.n	80005e0 <delayUs+0x14>
}
 80005ec:	bf00      	nop
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000084 	.word	0x20000084

08000600 <_write>:

int _write(int file, char *ptr, int len){
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx = 0; DataIdx < len; DataIdx++){
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	e009      	b.n	8000626 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	1c5a      	adds	r2, r3, #1
 8000616:	60ba      	str	r2, [r7, #8]
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffae 	bl	800057c <ITM_SendChar>
	for(DataIdx = 0; DataIdx < len; DataIdx++){
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	3301      	adds	r3, #1
 8000624:	617b      	str	r3, [r7, #20]
 8000626:	697a      	ldr	r2, [r7, #20]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	429a      	cmp	r2, r3
 800062c:	dbf1      	blt.n	8000612 <_write+0x12>
	}
	return len;
 800062e:	687b      	ldr	r3, [r7, #4]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3718      	adds	r7, #24
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063e:	f000 fbcb 	bl	8000dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 f8b3 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000646:	f000 f95d 	bl	8000904 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800064a:	f000 f931 	bl	80008b0 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 800064e:	f000 f90b 	bl	8000868 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  initUart(&huart2);
 8000652:	4850      	ldr	r0, [pc, #320]	; (8000794 <main+0x15c>)
 8000654:	f000 fb20 	bl	8000c98 <initUart>
  HAL_TIM_Base_Start(&htim11);
 8000658:	484f      	ldr	r0, [pc, #316]	; (8000798 <main+0x160>)
 800065a:	f001 fc19 	bl	8001e90 <HAL_TIM_Base_Start>
  uint16_t delay = 10000;
 800065e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000662:	81fb      	strh	r3, [r7, #14]
  int8_t step = 0; // singed because line 120 step-- so can detect minus
 8000664:	2300      	movs	r3, #0
 8000666:	737b      	strb	r3, [r7, #13]
  uint8_t direction = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	733b      	strb	r3, [r7, #12]
  uint8_t stepTable[] = {0b1010, 0b0110, 0b0101, 0b1001};
 800066c:	4b4b      	ldr	r3, [pc, #300]	; (800079c <main+0x164>)
 800066e:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, (stepTable[step] >> 3) &1);
 8000670:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000674:	3310      	adds	r3, #16
 8000676:	443b      	add	r3, r7
 8000678:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800067c:	08db      	lsrs	r3, r3, #3
 800067e:	b2db      	uxtb	r3, r3
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	b2db      	uxtb	r3, r3
 8000686:	461a      	mov	r2, r3
 8000688:	2120      	movs	r1, #32
 800068a:	4845      	ldr	r0, [pc, #276]	; (80007a0 <main+0x168>)
 800068c:	f000 ff3e 	bl	800150c <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, (stepTable[step] >> 2) &1);
 8000690:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000694:	3310      	adds	r3, #16
 8000696:	443b      	add	r3, r7
 8000698:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800069c:	089b      	lsrs	r3, r3, #2
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	461a      	mov	r2, r3
 80006a8:	2110      	movs	r1, #16
 80006aa:	483d      	ldr	r0, [pc, #244]	; (80007a0 <main+0x168>)
 80006ac:	f000 ff2e 	bl	800150c <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(M3_GPIO_Port, M3_Pin, (stepTable[step] >> 1) &1);
 80006b0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80006b4:	3310      	adds	r3, #16
 80006b6:	443b      	add	r3, r7
 80006b8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80006bc:	085b      	lsrs	r3, r3, #1
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	461a      	mov	r2, r3
 80006c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006cc:	4834      	ldr	r0, [pc, #208]	; (80007a0 <main+0x168>)
 80006ce:	f000 ff1d 	bl	800150c <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(M4_GPIO_Port, M4_Pin, (stepTable[step] >> 0) &1);
 80006d2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80006d6:	3310      	adds	r3, #16
 80006d8:	443b      	add	r3, r7
 80006da:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	461a      	mov	r2, r3
 80006e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ea:	482e      	ldr	r0, [pc, #184]	; (80007a4 <main+0x16c>)
 80006ec:	f000 ff0e 	bl	800150c <HAL_GPIO_WritePin>
  	if(direction == 1){
 80006f0:	7b3b      	ldrb	r3, [r7, #12]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d10c      	bne.n	8000710 <main+0xd8>
  		step++;
 80006f6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	3301      	adds	r3, #1
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	737b      	strb	r3, [r7, #13]
  		if(step == 4) step = 0;
 8000702:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000706:	2b04      	cmp	r3, #4
 8000708:	d111      	bne.n	800072e <main+0xf6>
 800070a:	2300      	movs	r3, #0
 800070c:	737b      	strb	r3, [r7, #13]
 800070e:	e00e      	b.n	800072e <main+0xf6>
  	}
  	else if(direction == 2){
 8000710:	7b3b      	ldrb	r3, [r7, #12]
 8000712:	2b02      	cmp	r3, #2
 8000714:	d10b      	bne.n	800072e <main+0xf6>
  		step--;
 8000716:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800071a:	b2db      	uxtb	r3, r3
 800071c:	3b01      	subs	r3, #1
 800071e:	b2db      	uxtb	r3, r3
 8000720:	737b      	strb	r3, [r7, #13]
  		if(step<0)step = 3;
 8000722:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da01      	bge.n	800072e <main+0xf6>
 800072a:	2303      	movs	r3, #3
 800072c:	737b      	strb	r3, [r7, #13]
  	}
  	delayUs(delay);
 800072e:	89fb      	ldrh	r3, [r7, #14]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff4b 	bl	80005cc <delayUs>
  	if(delay>1400) {
 8000736:	89fb      	ldrh	r3, [r7, #14]
 8000738:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800073c:	d907      	bls.n	800074e <main+0x116>
  		delay-=100;
 800073e:	89fb      	ldrh	r3, [r7, #14]
 8000740:	3b64      	subs	r3, #100	; 0x64
 8000742:	81fb      	strh	r3, [r7, #14]
  		printf("%d\n", delay);
 8000744:	89fb      	ldrh	r3, [r7, #14]
 8000746:	4619      	mov	r1, r3
 8000748:	4817      	ldr	r0, [pc, #92]	; (80007a8 <main+0x170>)
 800074a:	f002 fcbd 	bl	80030c8 <iprintf>
  	}
  	//input the signal to terminal
  	char ch = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	72fb      	strb	r3, [r7, #11]
  	ch = getChar();
 8000752:	f000 fae5 	bl	8000d20 <getChar>
 8000756:	4603      	mov	r3, r0
 8000758:	72fb      	strb	r3, [r7, #11]
  	if(ch == 'u') {
 800075a:	7afb      	ldrb	r3, [r7, #11]
 800075c:	2b75      	cmp	r3, #117	; 0x75
 800075e:	d106      	bne.n	800076e <main+0x136>
  		direction = 1;
 8000760:	2301      	movs	r3, #1
 8000762:	733b      	strb	r3, [r7, #12]
  		delay = 10000;
 8000764:	f242 7310 	movw	r3, #10000	; 0x2710
 8000768:	81fb      	strh	r3, [r7, #14]
  		step = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	737b      	strb	r3, [r7, #13]
  	}
  	if(ch=='d'){
 800076e:	7afb      	ldrb	r3, [r7, #11]
 8000770:	2b64      	cmp	r3, #100	; 0x64
 8000772:	d106      	bne.n	8000782 <main+0x14a>
  		direction = 2;
 8000774:	2302      	movs	r3, #2
 8000776:	733b      	strb	r3, [r7, #12]
  		delay = 10000;
 8000778:	f242 7310 	movw	r3, #10000	; 0x2710
 800077c:	81fb      	strh	r3, [r7, #14]
  		step = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	737b      	strb	r3, [r7, #13]
  	}
  	if(ch=='s'){
 8000782:	7afb      	ldrb	r3, [r7, #11]
 8000784:	2b73      	cmp	r3, #115	; 0x73
 8000786:	f47f af73 	bne.w	8000670 <main+0x38>
  		direction = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	733b      	strb	r3, [r7, #12]
  		step = 5;
 800078e:	2305      	movs	r3, #5
 8000790:	737b      	strb	r3, [r7, #13]
  {
 8000792:	e76d      	b.n	8000670 <main+0x38>
 8000794:	200000cc 	.word	0x200000cc
 8000798:	20000084 	.word	0x20000084
 800079c:	0905060a 	.word	0x0905060a
 80007a0:	40020400 	.word	0x40020400
 80007a4:	40020000 	.word	0x40020000
 80007a8:	08003dcc 	.word	0x08003dcc

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b094      	sub	sp, #80	; 0x50
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	2230      	movs	r2, #48	; 0x30
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f002 fcd9 	bl	8003172 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <SystemClock_Config+0xb4>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	4a21      	ldr	r2, [pc, #132]	; (8000860 <SystemClock_Config+0xb4>)
 80007da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007de:	6413      	str	r3, [r2, #64]	; 0x40
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <SystemClock_Config+0xb4>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <SystemClock_Config+0xb8>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <SystemClock_Config+0xb8>)
 80007f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	4b19      	ldr	r3, [pc, #100]	; (8000864 <SystemClock_Config+0xb8>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000808:	2302      	movs	r3, #2
 800080a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080c:	2301      	movs	r3, #1
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000810:	2310      	movs	r3, #16
 8000812:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000814:	2300      	movs	r3, #0
 8000816:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 0320 	add.w	r3, r7, #32
 800081c:	4618      	mov	r0, r3
 800081e:	f000 fe8f 	bl	8001540 <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000828:	f000 f8c8 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	230f      	movs	r3, #15
 800082e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f001 f8f2 	bl	8001a30 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000852:	f000 f8b3 	bl	80009bc <Error_Handler>
  }
}
 8000856:	bf00      	nop
 8000858:	3750      	adds	r7, #80	; 0x50
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	40007000 	.word	0x40007000

08000868 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_TIM11_Init+0x40>)
 800086e:	4a0f      	ldr	r2, [pc, #60]	; (80008ac <MX_TIM11_Init+0x44>)
 8000870:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16-1;
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <MX_TIM11_Init+0x40>)
 8000874:	220f      	movs	r2, #15
 8000876:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000878:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MX_TIM11_Init+0x40>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800087e:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <MX_TIM11_Init+0x40>)
 8000880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000884:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <MX_TIM11_Init+0x40>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_TIM11_Init+0x40>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_TIM11_Init+0x40>)
 8000894:	f001 faac 	bl	8001df0 <HAL_TIM_Base_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800089e:	f000 f88d 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000084 	.word	0x20000084
 80008ac:	40014800 	.word	0x40014800

080008b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <MX_USART2_UART_Init+0x50>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008e8:	f001 fbb8 	bl	800205c <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008f2:	f000 f863 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200000cc 	.word	0x200000cc
 8000900:	40004400 	.word	0x40004400

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <MX_GPIO_Init+0xac>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a23      	ldr	r2, [pc, #140]	; (80009b0 <MX_GPIO_Init+0xac>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <MX_GPIO_Init+0xac>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <MX_GPIO_Init+0xac>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a1c      	ldr	r2, [pc, #112]	; (80009b0 <MX_GPIO_Init+0xac>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_GPIO_Init+0xac>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M3_Pin|M2_Pin|M1_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000958:	4816      	ldr	r0, [pc, #88]	; (80009b4 <MX_GPIO_Init+0xb0>)
 800095a:	f000 fdd7 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M4_GPIO_Port, M4_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000964:	4814      	ldr	r0, [pc, #80]	; (80009b8 <MX_GPIO_Init+0xb4>)
 8000966:	f000 fdd1 	bl	800150c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M3_Pin M2_Pin M1_Pin */
  GPIO_InitStruct.Pin = M3_Pin|M2_Pin|M1_Pin;
 800096a:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800096e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	4619      	mov	r1, r3
 8000982:	480c      	ldr	r0, [pc, #48]	; (80009b4 <MX_GPIO_Init+0xb0>)
 8000984:	f000 fc3e 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : M4_Pin */
  GPIO_InitStruct.Pin = M4_Pin;
 8000988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800098c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(M4_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	4619      	mov	r1, r3
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_GPIO_Init+0xb4>)
 80009a2:	f000 fc2f 	bl	8001204 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a6:	bf00      	nop
 80009a8:	3720      	adds	r7, #32
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020400 	.word	0x40020400
 80009b8:	40020000 	.word	0x40020000

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <Error_Handler+0x8>
	...

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <HAL_MspInit+0x4c>)
 80009d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009dc:	6453      	str	r3, [r2, #68]	; 0x44
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <HAL_MspInit+0x4c>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <HAL_MspInit+0x4c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <HAL_MspInit+0x4c>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f8:	6413      	str	r3, [r2, #64]	; 0x40
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_MspInit+0x4c>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <HAL_TIM_Base_MspInit+0x3c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d10d      	bne.n	8000a46 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <HAL_TIM_Base_MspInit+0x40>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	4a09      	ldr	r2, [pc, #36]	; (8000a58 <HAL_TIM_Base_MspInit+0x40>)
 8000a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a38:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3a:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <HAL_TIM_Base_MspInit+0x40>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000a46:	bf00      	nop
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40014800 	.word	0x40014800
 8000a58:	40023800 	.word	0x40023800

08000a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a1d      	ldr	r2, [pc, #116]	; (8000af0 <HAL_UART_MspInit+0x94>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d133      	bne.n	8000ae6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <HAL_UART_MspInit+0x98>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <HAL_UART_MspInit+0x98>)
 8000a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8e:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <HAL_UART_MspInit+0x98>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_UART_MspInit+0x98>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <HAL_UART_MspInit+0x98>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_UART_MspInit+0x98>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ab6:	230c      	movs	r3, #12
 8000ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ac6:	2307      	movs	r3, #7
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4809      	ldr	r0, [pc, #36]	; (8000af8 <HAL_UART_MspInit+0x9c>)
 8000ad2:	f000 fb97 	bl	8001204 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2026      	movs	r0, #38	; 0x26
 8000adc:	f000 fac9 	bl	8001072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ae0:	2026      	movs	r0, #38	; 0x26
 8000ae2:	f000 fae2 	bl	80010aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ae6:	bf00      	nop
 8000ae8:	3728      	adds	r7, #40	; 0x28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40004400 	.word	0x40004400
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020000 	.word	0x40020000

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b00:	e7fe      	b.n	8000b00 <NMI_Handler+0x4>

08000b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <MemManage_Handler+0x4>

08000b0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <BusFault_Handler+0x4>

08000b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <UsageFault_Handler+0x4>

08000b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b48:	f000 f998 	bl	8000e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b54:	4802      	ldr	r0, [pc, #8]	; (8000b60 <USART2_IRQHandler+0x10>)
 8000b56:	f001 faf7 	bl	8002148 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200000cc 	.word	0x200000cc

08000b64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	e00a      	b.n	8000b8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b76:	f3af 8000 	nop.w
 8000b7a:	4601      	mov	r1, r0
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	60ba      	str	r2, [r7, #8]
 8000b82:	b2ca      	uxtb	r2, r1
 8000b84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	697a      	ldr	r2, [r7, #20]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dbf0      	blt.n	8000b76 <_read+0x12>
  }

  return len;
 8000b94:	687b      	ldr	r3, [r7, #4]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
 8000bbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bc6:	605a      	str	r2, [r3, #4]
  return 0;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <_isatty>:

int _isatty(int file)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bde:	2301      	movs	r3, #1
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
	...

08000c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c10:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <_sbrk+0x5c>)
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <_sbrk+0x60>)
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <_sbrk+0x64>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <_sbrk+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d207      	bcs.n	8000c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c38:	f002 faea 	bl	8003210 <__errno>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	220c      	movs	r2, #12
 8000c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	e009      	b.n	8000c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <_sbrk+0x64>)
 8000c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20020000 	.word	0x20020000
 8000c68:	00000400 	.word	0x00000400
 8000c6c:	20000114 	.word	0x20000114
 8000c70:	20000378 	.word	0x20000378

08000c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <SystemInit+0x20>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <SystemInit+0x20>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <initUart>:
int rxBufferPp;					// put pointer (write)
uint8_t rxBuffer[rxBufferMax];
uint8_t rxChar;

// uart device reset (uart   jang chi   cho gi hwa)
void initUart(UART_HandleTypeDef *inHuart) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
	huart= inHuart;
 8000ca0:	4a06      	ldr	r2, [pc, #24]	; (8000cbc <initUart+0x24>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(huart, &rxChar, 1);
 8000ca6:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <initUart+0x24>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2201      	movs	r2, #1
 8000cac:	4904      	ldr	r1, [pc, #16]	; (8000cc0 <initUart+0x28>)
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f001 fa24 	bl	80020fc <HAL_UART_Receive_IT>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000118 	.word	0x20000118
 8000cc0:	20000223 	.word	0x20000223

08000cc4 <HAL_UART_RxCpltCallback>:

// message recieve process(mun ja   chu ri   gwa jung)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	rxBuffer[rxBufferPp++] = rxChar;
 8000ccc:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <HAL_UART_RxCpltCallback+0x4c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	1c5a      	adds	r2, r3, #1
 8000cd2:	490f      	ldr	r1, [pc, #60]	; (8000d10 <HAL_UART_RxCpltCallback+0x4c>)
 8000cd4:	600a      	str	r2, [r1, #0]
 8000cd6:	4a0f      	ldr	r2, [pc, #60]	; (8000d14 <HAL_UART_RxCpltCallback+0x50>)
 8000cd8:	7811      	ldrb	r1, [r2, #0]
 8000cda:	4a0f      	ldr	r2, [pc, #60]	; (8000d18 <HAL_UART_RxCpltCallback+0x54>)
 8000cdc:	54d1      	strb	r1, [r2, r3]
	rxBufferPp %= rxBufferMax;
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_UART_RxCpltCallback+0x4c>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_UART_RxCpltCallback+0x58>)
 8000ce4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ce8:	4413      	add	r3, r2
 8000cea:	11d9      	asrs	r1, r3, #7
 8000cec:	17d3      	asrs	r3, r2, #31
 8000cee:	1ac9      	subs	r1, r1, r3
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	021b      	lsls	r3, r3, #8
 8000cf4:	1a5b      	subs	r3, r3, r1
 8000cf6:	1ad1      	subs	r1, r2, r3
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <HAL_UART_RxCpltCallback+0x4c>)
 8000cfa:	6019      	str	r1, [r3, #0]
	HAL_UART_Receive_IT(huart, &rxChar, 1);//interrupt always reset
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	4905      	ldr	r1, [pc, #20]	; (8000d14 <HAL_UART_RxCpltCallback+0x50>)
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f001 f9fb 	bl	80020fc <HAL_UART_Receive_IT>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000120 	.word	0x20000120
 8000d14:	20000223 	.word	0x20000223
 8000d18:	20000124 	.word	0x20000124
 8000d1c:	80808081 	.word	0x80808081

08000d20 <getChar>:

// read(get?) message from buffer (buffer e su   mun ja   ga jeu o gi)
uint8_t getChar() {
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
	uint8_t result;
	if(rxBufferGp == rxBufferPp) return 0;
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <getChar+0x54>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <getChar+0x58>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d101      	bne.n	8000d36 <getChar+0x16>
 8000d32:	2300      	movs	r3, #0
 8000d34:	e017      	b.n	8000d66 <getChar+0x46>
	result = rxBuffer[rxBufferGp++];
 8000d36:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <getChar+0x54>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	1c5a      	adds	r2, r3, #1
 8000d3c:	490d      	ldr	r1, [pc, #52]	; (8000d74 <getChar+0x54>)
 8000d3e:	600a      	str	r2, [r1, #0]
 8000d40:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <getChar+0x5c>)
 8000d42:	5cd3      	ldrb	r3, [r2, r3]
 8000d44:	71fb      	strb	r3, [r7, #7]
	rxBufferGp %= rxBufferMax;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <getChar+0x54>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <getChar+0x60>)
 8000d4c:	fb83 1302 	smull	r1, r3, r3, r2
 8000d50:	4413      	add	r3, r2
 8000d52:	11d9      	asrs	r1, r3, #7
 8000d54:	17d3      	asrs	r3, r2, #31
 8000d56:	1ac9      	subs	r1, r1, r3
 8000d58:	460b      	mov	r3, r1
 8000d5a:	021b      	lsls	r3, r3, #8
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	1ad1      	subs	r1, r2, r3
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <getChar+0x54>)
 8000d62:	6019      	str	r1, [r3, #0]
	return result;
 8000d64:	79fb      	ldrb	r3, [r7, #7]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	2000011c 	.word	0x2000011c
 8000d78:	20000120 	.word	0x20000120
 8000d7c:	20000124 	.word	0x20000124
 8000d80:	80808081 	.word	0x80808081

08000d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d88:	f7ff ff74 	bl	8000c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d8c:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d8e:	490d      	ldr	r1, [pc, #52]	; (8000dc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d90:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da4:	4c0a      	ldr	r4, [pc, #40]	; (8000dd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db2:	f002 fa33 	bl	800321c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db6:	f7ff fc3f 	bl	8000638 <main>
  bx  lr    
 8000dba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000dc8:	08003e2c 	.word	0x08003e2c
  ldr r2, =_sbss
 8000dcc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000dd0:	20000374 	.word	0x20000374

08000dd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC_IRQHandler>
	...

08000dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0d      	ldr	r2, [pc, #52]	; (8000e18 <HAL_Init+0x40>)
 8000de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <HAL_Init+0x40>)
 8000dee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <HAL_Init+0x40>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <HAL_Init+0x40>)
 8000dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e00:	2003      	movs	r0, #3
 8000e02:	f000 f92b 	bl	800105c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e06:	200f      	movs	r0, #15
 8000e08:	f000 f808 	bl	8000e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e0c:	f7ff fddc 	bl	80009c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40023c00 	.word	0x40023c00

08000e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <HAL_InitTick+0x54>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_InitTick+0x58>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f943 	bl	80010c6 <HAL_SYSTICK_Config>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e00e      	b.n	8000e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b0f      	cmp	r3, #15
 8000e4e:	d80a      	bhi.n	8000e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e50:	2200      	movs	r2, #0
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295
 8000e58:	f000 f90b 	bl	8001072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e5c:	4a06      	ldr	r2, [pc, #24]	; (8000e78 <HAL_InitTick+0x5c>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e000      	b.n	8000e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000000 	.word	0x20000000
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000004 	.word	0x20000004

08000e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x20>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <HAL_IncTick+0x24>)
 8000e8e:	6013      	str	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000224 	.word	0x20000224

08000ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <HAL_GetTick+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000224 	.word	0x20000224

08000ebc <__NVIC_SetPriorityGrouping>:
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eee:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	60d3      	str	r3, [r2, #12]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_GetPriorityGrouping>:
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <__NVIC_GetPriorityGrouping+0x18>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	f003 0307 	and.w	r3, r3, #7
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_EnableIRQ>:
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	db0b      	blt.n	8000f4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	f003 021f 	and.w	r2, r3, #31
 8000f38:	4907      	ldr	r1, [pc, #28]	; (8000f58 <__NVIC_EnableIRQ+0x38>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	095b      	lsrs	r3, r3, #5
 8000f40:	2001      	movs	r0, #1
 8000f42:	fa00 f202 	lsl.w	r2, r0, r2
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000e100 	.word	0xe000e100

08000f5c <__NVIC_SetPriority>:
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db0a      	blt.n	8000f86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <__NVIC_SetPriority+0x4c>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f84:	e00a      	b.n	8000f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4908      	ldr	r1, [pc, #32]	; (8000fac <__NVIC_SetPriority+0x50>)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	3b04      	subs	r3, #4
 8000f94:	0112      	lsls	r2, r2, #4
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	440b      	add	r3, r1
 8000f9a:	761a      	strb	r2, [r3, #24]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000e100 	.word	0xe000e100
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <NVIC_EncodePriority>:
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f1c3 0307 	rsb	r3, r3, #7
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	bf28      	it	cs
 8000fce:	2304      	movcs	r3, #4
 8000fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d902      	bls.n	8000fe0 <NVIC_EncodePriority+0x30>
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3b03      	subs	r3, #3
 8000fde:	e000      	b.n	8000fe2 <NVIC_EncodePriority+0x32>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	43d9      	mvns	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	4313      	orrs	r3, r2
}
 800100a:	4618      	mov	r0, r3
 800100c:	3724      	adds	r7, #36	; 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <SysTick_Config>:
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001028:	d301      	bcc.n	800102e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800102a:	2301      	movs	r3, #1
 800102c:	e00f      	b.n	800104e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <SysTick_Config+0x40>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001036:	210f      	movs	r1, #15
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f7ff ff8e 	bl	8000f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <SysTick_Config+0x40>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <SysTick_Config+0x40>)
 8001048:	2207      	movs	r2, #7
 800104a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	e000e010 	.word	0xe000e010

0800105c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff29 	bl	8000ebc <__NVIC_SetPriorityGrouping>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001084:	f7ff ff3e 	bl	8000f04 <__NVIC_GetPriorityGrouping>
 8001088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	6978      	ldr	r0, [r7, #20]
 8001090:	f7ff ff8e 	bl	8000fb0 <NVIC_EncodePriority>
 8001094:	4602      	mov	r2, r0
 8001096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff5d 	bl	8000f5c <__NVIC_SetPriority>
}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff31 	bl	8000f20 <__NVIC_EnableIRQ>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ffa2 	bl	8001018 <SysTick_Config>
 80010d4:	4603      	mov	r3, r0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b084      	sub	sp, #16
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010ec:	f7ff feda 	bl	8000ea4 <HAL_GetTick>
 80010f0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d008      	beq.n	8001110 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2280      	movs	r2, #128	; 0x80
 8001102:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e052      	b.n	80011b6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 0216 	bic.w	r2, r2, #22
 800111e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	695a      	ldr	r2, [r3, #20]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800112e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	2b00      	cmp	r3, #0
 8001136:	d103      	bne.n	8001140 <HAL_DMA_Abort+0x62>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800113c:	2b00      	cmp	r3, #0
 800113e:	d007      	beq.n	8001150 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 0208 	bic.w	r2, r2, #8
 800114e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0201 	bic.w	r2, r2, #1
 800115e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001160:	e013      	b.n	800118a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001162:	f7ff fe9f 	bl	8000ea4 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b05      	cmp	r3, #5
 800116e:	d90c      	bls.n	800118a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2220      	movs	r2, #32
 8001174:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2203      	movs	r2, #3
 800117a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e015      	b.n	80011b6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1e4      	bne.n	8001162 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800119c:	223f      	movs	r2, #63	; 0x3f
 800119e:	409a      	lsls	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d004      	beq.n	80011dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2280      	movs	r2, #128	; 0x80
 80011d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e00c      	b.n	80011f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2205      	movs	r2, #5
 80011e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0201 	bic.w	r2, r2, #1
 80011f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	e159      	b.n	80014d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001220:	2201      	movs	r2, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	429a      	cmp	r2, r3
 800123a:	f040 8148 	bne.w	80014ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	2b01      	cmp	r3, #1
 8001248:	d005      	beq.n	8001256 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001252:	2b02      	cmp	r3, #2
 8001254:	d130      	bne.n	80012b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	2203      	movs	r2, #3
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800128c:	2201      	movs	r2, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	091b      	lsrs	r3, r3, #4
 80012a2:	f003 0201 	and.w	r2, r3, #1
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d017      	beq.n	80012f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d123      	bne.n	8001348 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	08da      	lsrs	r2, r3, #3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3208      	adds	r2, #8
 8001308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	220f      	movs	r2, #15
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	691a      	ldr	r2, [r3, #16]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	08da      	lsrs	r2, r3, #3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3208      	adds	r2, #8
 8001342:	69b9      	ldr	r1, [r7, #24]
 8001344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0203 	and.w	r2, r3, #3
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 80a2 	beq.w	80014ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b57      	ldr	r3, [pc, #348]	; (80014ec <HAL_GPIO_Init+0x2e8>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	4a56      	ldr	r2, [pc, #344]	; (80014ec <HAL_GPIO_Init+0x2e8>)
 8001394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001398:	6453      	str	r3, [r2, #68]	; 0x44
 800139a:	4b54      	ldr	r3, [pc, #336]	; (80014ec <HAL_GPIO_Init+0x2e8>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013a6:	4a52      	ldr	r2, [pc, #328]	; (80014f0 <HAL_GPIO_Init+0x2ec>)
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	3302      	adds	r3, #2
 80013ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	220f      	movs	r2, #15
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a49      	ldr	r2, [pc, #292]	; (80014f4 <HAL_GPIO_Init+0x2f0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d019      	beq.n	8001406 <HAL_GPIO_Init+0x202>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a48      	ldr	r2, [pc, #288]	; (80014f8 <HAL_GPIO_Init+0x2f4>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d013      	beq.n	8001402 <HAL_GPIO_Init+0x1fe>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a47      	ldr	r2, [pc, #284]	; (80014fc <HAL_GPIO_Init+0x2f8>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d00d      	beq.n	80013fe <HAL_GPIO_Init+0x1fa>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a46      	ldr	r2, [pc, #280]	; (8001500 <HAL_GPIO_Init+0x2fc>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d007      	beq.n	80013fa <HAL_GPIO_Init+0x1f6>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a45      	ldr	r2, [pc, #276]	; (8001504 <HAL_GPIO_Init+0x300>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d101      	bne.n	80013f6 <HAL_GPIO_Init+0x1f2>
 80013f2:	2304      	movs	r3, #4
 80013f4:	e008      	b.n	8001408 <HAL_GPIO_Init+0x204>
 80013f6:	2307      	movs	r3, #7
 80013f8:	e006      	b.n	8001408 <HAL_GPIO_Init+0x204>
 80013fa:	2303      	movs	r3, #3
 80013fc:	e004      	b.n	8001408 <HAL_GPIO_Init+0x204>
 80013fe:	2302      	movs	r3, #2
 8001400:	e002      	b.n	8001408 <HAL_GPIO_Init+0x204>
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <HAL_GPIO_Init+0x204>
 8001406:	2300      	movs	r3, #0
 8001408:	69fa      	ldr	r2, [r7, #28]
 800140a:	f002 0203 	and.w	r2, r2, #3
 800140e:	0092      	lsls	r2, r2, #2
 8001410:	4093      	lsls	r3, r2
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001418:	4935      	ldr	r1, [pc, #212]	; (80014f0 <HAL_GPIO_Init+0x2ec>)
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3302      	adds	r3, #2
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001426:	4b38      	ldr	r3, [pc, #224]	; (8001508 <HAL_GPIO_Init+0x304>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800144a:	4a2f      	ldr	r2, [pc, #188]	; (8001508 <HAL_GPIO_Init+0x304>)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001450:	4b2d      	ldr	r3, [pc, #180]	; (8001508 <HAL_GPIO_Init+0x304>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001474:	4a24      	ldr	r2, [pc, #144]	; (8001508 <HAL_GPIO_Init+0x304>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800147a:	4b23      	ldr	r3, [pc, #140]	; (8001508 <HAL_GPIO_Init+0x304>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800149e:	4a1a      	ldr	r2, [pc, #104]	; (8001508 <HAL_GPIO_Init+0x304>)
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a4:	4b18      	ldr	r3, [pc, #96]	; (8001508 <HAL_GPIO_Init+0x304>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014c8:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <HAL_GPIO_Init+0x304>)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3301      	adds	r3, #1
 80014d2:	61fb      	str	r3, [r7, #28]
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	2b0f      	cmp	r3, #15
 80014d8:	f67f aea2 	bls.w	8001220 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40013800 	.word	0x40013800
 80014f4:	40020000 	.word	0x40020000
 80014f8:	40020400 	.word	0x40020400
 80014fc:	40020800 	.word	0x40020800
 8001500:	40020c00 	.word	0x40020c00
 8001504:	40021000 	.word	0x40021000
 8001508:	40013c00 	.word	0x40013c00

0800150c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	807b      	strh	r3, [r7, #2]
 8001518:	4613      	mov	r3, r2
 800151a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800151c:	787b      	ldrb	r3, [r7, #1]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001528:	e003      	b.n	8001532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800152a:	887b      	ldrh	r3, [r7, #2]
 800152c:	041a      	lsls	r2, r3, #16
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	619a      	str	r2, [r3, #24]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e267      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d075      	beq.n	800164a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800155e:	4b88      	ldr	r3, [pc, #544]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 030c 	and.w	r3, r3, #12
 8001566:	2b04      	cmp	r3, #4
 8001568:	d00c      	beq.n	8001584 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800156a:	4b85      	ldr	r3, [pc, #532]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001572:	2b08      	cmp	r3, #8
 8001574:	d112      	bne.n	800159c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001576:	4b82      	ldr	r3, [pc, #520]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800157e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001582:	d10b      	bne.n	800159c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001584:	4b7e      	ldr	r3, [pc, #504]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d05b      	beq.n	8001648 <HAL_RCC_OscConfig+0x108>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d157      	bne.n	8001648 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e242      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a4:	d106      	bne.n	80015b4 <HAL_RCC_OscConfig+0x74>
 80015a6:	4b76      	ldr	r3, [pc, #472]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a75      	ldr	r2, [pc, #468]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80015ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e01d      	b.n	80015f0 <HAL_RCC_OscConfig+0xb0>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015bc:	d10c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x98>
 80015be:	4b70      	ldr	r3, [pc, #448]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a6f      	ldr	r2, [pc, #444]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80015c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	4b6d      	ldr	r3, [pc, #436]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a6c      	ldr	r2, [pc, #432]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80015d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	e00b      	b.n	80015f0 <HAL_RCC_OscConfig+0xb0>
 80015d8:	4b69      	ldr	r3, [pc, #420]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a68      	ldr	r2, [pc, #416]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80015de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4b66      	ldr	r3, [pc, #408]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a65      	ldr	r2, [pc, #404]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80015ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d013      	beq.n	8001620 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fc54 	bl	8000ea4 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001600:	f7ff fc50 	bl	8000ea4 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	; 0x64
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e207      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001612:	4b5b      	ldr	r3, [pc, #364]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f0      	beq.n	8001600 <HAL_RCC_OscConfig+0xc0>
 800161e:	e014      	b.n	800164a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff fc40 	bl	8000ea4 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001628:	f7ff fc3c 	bl	8000ea4 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b64      	cmp	r3, #100	; 0x64
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e1f3      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163a:	4b51      	ldr	r3, [pc, #324]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0xe8>
 8001646:	e000      	b.n	800164a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d063      	beq.n	800171e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001656:	4b4a      	ldr	r3, [pc, #296]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00b      	beq.n	800167a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001662:	4b47      	ldr	r3, [pc, #284]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800166a:	2b08      	cmp	r3, #8
 800166c:	d11c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800166e:	4b44      	ldr	r3, [pc, #272]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d116      	bne.n	80016a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167a:	4b41      	ldr	r3, [pc, #260]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d005      	beq.n	8001692 <HAL_RCC_OscConfig+0x152>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d001      	beq.n	8001692 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e1c7      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001692:	4b3b      	ldr	r3, [pc, #236]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	4937      	ldr	r1, [pc, #220]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a6:	e03a      	b.n	800171e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d020      	beq.n	80016f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b0:	4b34      	ldr	r3, [pc, #208]	; (8001784 <HAL_RCC_OscConfig+0x244>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b6:	f7ff fbf5 	bl	8000ea4 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016be:	f7ff fbf1 	bl	8000ea4 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e1a8      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d0:	4b2b      	ldr	r3, [pc, #172]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0f0      	beq.n	80016be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016dc:	4b28      	ldr	r3, [pc, #160]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	4925      	ldr	r1, [pc, #148]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	600b      	str	r3, [r1, #0]
 80016f0:	e015      	b.n	800171e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016f2:	4b24      	ldr	r3, [pc, #144]	; (8001784 <HAL_RCC_OscConfig+0x244>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f8:	f7ff fbd4 	bl	8000ea4 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001700:	f7ff fbd0 	bl	8000ea4 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e187      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f0      	bne.n	8001700 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b00      	cmp	r3, #0
 8001728:	d036      	beq.n	8001798 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d016      	beq.n	8001760 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <HAL_RCC_OscConfig+0x248>)
 8001734:	2201      	movs	r2, #1
 8001736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001738:	f7ff fbb4 	bl	8000ea4 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001740:	f7ff fbb0 	bl	8000ea4 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e167      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_RCC_OscConfig+0x240>)
 8001754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f0      	beq.n	8001740 <HAL_RCC_OscConfig+0x200>
 800175e:	e01b      	b.n	8001798 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001760:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_RCC_OscConfig+0x248>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001766:	f7ff fb9d 	bl	8000ea4 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800176c:	e00e      	b.n	800178c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800176e:	f7ff fb99 	bl	8000ea4 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d907      	bls.n	800178c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e150      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
 8001780:	40023800 	.word	0x40023800
 8001784:	42470000 	.word	0x42470000
 8001788:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800178c:	4b88      	ldr	r3, [pc, #544]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 800178e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1ea      	bne.n	800176e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f000 8097 	beq.w	80018d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017a6:	2300      	movs	r3, #0
 80017a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017aa:	4b81      	ldr	r3, [pc, #516]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10f      	bne.n	80017d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	4b7d      	ldr	r3, [pc, #500]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a7c      	ldr	r2, [pc, #496]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b7a      	ldr	r3, [pc, #488]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017d2:	2301      	movs	r3, #1
 80017d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d6:	4b77      	ldr	r3, [pc, #476]	; (80019b4 <HAL_RCC_OscConfig+0x474>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d118      	bne.n	8001814 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017e2:	4b74      	ldr	r3, [pc, #464]	; (80019b4 <HAL_RCC_OscConfig+0x474>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a73      	ldr	r2, [pc, #460]	; (80019b4 <HAL_RCC_OscConfig+0x474>)
 80017e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ee:	f7ff fb59 	bl	8000ea4 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f6:	f7ff fb55 	bl	8000ea4 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e10c      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001808:	4b6a      	ldr	r3, [pc, #424]	; (80019b4 <HAL_RCC_OscConfig+0x474>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d106      	bne.n	800182a <HAL_RCC_OscConfig+0x2ea>
 800181c:	4b64      	ldr	r3, [pc, #400]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 800181e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001820:	4a63      	ldr	r2, [pc, #396]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6713      	str	r3, [r2, #112]	; 0x70
 8001828:	e01c      	b.n	8001864 <HAL_RCC_OscConfig+0x324>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2b05      	cmp	r3, #5
 8001830:	d10c      	bne.n	800184c <HAL_RCC_OscConfig+0x30c>
 8001832:	4b5f      	ldr	r3, [pc, #380]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 8001834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001836:	4a5e      	ldr	r2, [pc, #376]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 8001838:	f043 0304 	orr.w	r3, r3, #4
 800183c:	6713      	str	r3, [r2, #112]	; 0x70
 800183e:	4b5c      	ldr	r3, [pc, #368]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 8001840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001842:	4a5b      	ldr	r2, [pc, #364]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6713      	str	r3, [r2, #112]	; 0x70
 800184a:	e00b      	b.n	8001864 <HAL_RCC_OscConfig+0x324>
 800184c:	4b58      	ldr	r3, [pc, #352]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 800184e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001850:	4a57      	ldr	r2, [pc, #348]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 8001852:	f023 0301 	bic.w	r3, r3, #1
 8001856:	6713      	str	r3, [r2, #112]	; 0x70
 8001858:	4b55      	ldr	r3, [pc, #340]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 800185a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185c:	4a54      	ldr	r2, [pc, #336]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 800185e:	f023 0304 	bic.w	r3, r3, #4
 8001862:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d015      	beq.n	8001898 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186c:	f7ff fb1a 	bl	8000ea4 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001872:	e00a      	b.n	800188a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001874:	f7ff fb16 	bl	8000ea4 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001882:	4293      	cmp	r3, r2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e0cb      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800188a:	4b49      	ldr	r3, [pc, #292]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 800188c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0ee      	beq.n	8001874 <HAL_RCC_OscConfig+0x334>
 8001896:	e014      	b.n	80018c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001898:	f7ff fb04 	bl	8000ea4 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800189e:	e00a      	b.n	80018b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a0:	f7ff fb00 	bl	8000ea4 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e0b5      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b6:	4b3e      	ldr	r3, [pc, #248]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 80018b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1ee      	bne.n	80018a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018c2:	7dfb      	ldrb	r3, [r7, #23]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d105      	bne.n	80018d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c8:	4b39      	ldr	r3, [pc, #228]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	4a38      	ldr	r2, [pc, #224]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 80018ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 80a1 	beq.w	8001a20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018de:	4b34      	ldr	r3, [pc, #208]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d05c      	beq.n	80019a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d141      	bne.n	8001976 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f2:	4b31      	ldr	r3, [pc, #196]	; (80019b8 <HAL_RCC_OscConfig+0x478>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff fad4 	bl	8000ea4 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff fad0 	bl	8000ea4 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e087      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001912:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69da      	ldr	r2, [r3, #28]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	019b      	lsls	r3, r3, #6
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001934:	085b      	lsrs	r3, r3, #1
 8001936:	3b01      	subs	r3, #1
 8001938:	041b      	lsls	r3, r3, #16
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	061b      	lsls	r3, r3, #24
 8001942:	491b      	ldr	r1, [pc, #108]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 8001944:	4313      	orrs	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <HAL_RCC_OscConfig+0x478>)
 800194a:	2201      	movs	r2, #1
 800194c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194e:	f7ff faa9 	bl	8000ea4 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001956:	f7ff faa5 	bl	8000ea4 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e05c      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0f0      	beq.n	8001956 <HAL_RCC_OscConfig+0x416>
 8001974:	e054      	b.n	8001a20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <HAL_RCC_OscConfig+0x478>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff fa92 	bl	8000ea4 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001984:	f7ff fa8e 	bl	8000ea4 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e045      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_RCC_OscConfig+0x470>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x444>
 80019a2:	e03d      	b.n	8001a20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d107      	bne.n	80019bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e038      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40007000 	.word	0x40007000
 80019b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019bc:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <HAL_RCC_OscConfig+0x4ec>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d028      	beq.n	8001a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d121      	bne.n	8001a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d11a      	bne.n	8001a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019ec:	4013      	ands	r3, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d111      	bne.n	8001a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a02:	085b      	lsrs	r3, r3, #1
 8001a04:	3b01      	subs	r3, #1
 8001a06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d107      	bne.n	8001a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d001      	beq.n	8001a20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800

08001a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0cc      	b.n	8001bde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a44:	4b68      	ldr	r3, [pc, #416]	; (8001be8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d90c      	bls.n	8001a6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a52:	4b65      	ldr	r3, [pc, #404]	; (8001be8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5a:	4b63      	ldr	r3, [pc, #396]	; (8001be8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0b8      	b.n	8001bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d020      	beq.n	8001aba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a84:	4b59      	ldr	r3, [pc, #356]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	4a58      	ldr	r2, [pc, #352]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0308 	and.w	r3, r3, #8
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a9c:	4b53      	ldr	r3, [pc, #332]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	4a52      	ldr	r2, [pc, #328]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa8:	4b50      	ldr	r3, [pc, #320]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	494d      	ldr	r1, [pc, #308]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d044      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d107      	bne.n	8001ade <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ace:	4b47      	ldr	r3, [pc, #284]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d119      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e07f      	b.n	8001bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d003      	beq.n	8001aee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	d107      	bne.n	8001afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aee:	4b3f      	ldr	r3, [pc, #252]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d109      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e06f      	b.n	8001bde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afe:	4b3b      	ldr	r3, [pc, #236]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e067      	b.n	8001bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b0e:	4b37      	ldr	r3, [pc, #220]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f023 0203 	bic.w	r2, r3, #3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	4934      	ldr	r1, [pc, #208]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b20:	f7ff f9c0 	bl	8000ea4 <HAL_GetTick>
 8001b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b26:	e00a      	b.n	8001b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b28:	f7ff f9bc 	bl	8000ea4 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e04f      	b.n	8001bde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3e:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 020c 	and.w	r2, r3, #12
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d1eb      	bne.n	8001b28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b50:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d20c      	bcs.n	8001b78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5e:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b66:	4b20      	ldr	r3, [pc, #128]	; (8001be8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e032      	b.n	8001bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d008      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b84:	4b19      	ldr	r3, [pc, #100]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	4916      	ldr	r1, [pc, #88]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d009      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	490e      	ldr	r1, [pc, #56]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bb6:	f000 f821 	bl	8001bfc <HAL_RCC_GetSysClockFreq>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	490a      	ldr	r1, [pc, #40]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc8:	5ccb      	ldrb	r3, [r1, r3]
 8001bca:	fa22 f303 	lsr.w	r3, r2, r3
 8001bce:	4a09      	ldr	r2, [pc, #36]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff f920 	bl	8000e1c <HAL_InitTick>

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023c00 	.word	0x40023c00
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	08003dd0 	.word	0x08003dd0
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	20000004 	.word	0x20000004

08001bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c00:	b090      	sub	sp, #64	; 0x40
 8001c02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	637b      	str	r3, [r7, #52]	; 0x34
 8001c08:	2300      	movs	r3, #0
 8001c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c14:	4b59      	ldr	r3, [pc, #356]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 030c 	and.w	r3, r3, #12
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d00d      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0x40>
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	f200 80a1 	bhi.w	8001d68 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <HAL_RCC_GetSysClockFreq+0x34>
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d003      	beq.n	8001c36 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c2e:	e09b      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c30:	4b53      	ldr	r3, [pc, #332]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c32:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001c34:	e09b      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c36:	4b53      	ldr	r3, [pc, #332]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c3a:	e098      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c3c:	4b4f      	ldr	r3, [pc, #316]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c44:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c46:	4b4d      	ldr	r3, [pc, #308]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d028      	beq.n	8001ca4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c52:	4b4a      	ldr	r3, [pc, #296]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	099b      	lsrs	r3, r3, #6
 8001c58:	2200      	movs	r2, #0
 8001c5a:	623b      	str	r3, [r7, #32]
 8001c5c:	627a      	str	r2, [r7, #36]	; 0x24
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
 8001c60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c64:	2100      	movs	r1, #0
 8001c66:	4b47      	ldr	r3, [pc, #284]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c68:	fb03 f201 	mul.w	r2, r3, r1
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	fb00 f303 	mul.w	r3, r0, r3
 8001c72:	4413      	add	r3, r2
 8001c74:	4a43      	ldr	r2, [pc, #268]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c76:	fba0 1202 	umull	r1, r2, r0, r2
 8001c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c7c:	460a      	mov	r2, r1
 8001c7e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c82:	4413      	add	r3, r2
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c88:	2200      	movs	r2, #0
 8001c8a:	61bb      	str	r3, [r7, #24]
 8001c8c:	61fa      	str	r2, [r7, #28]
 8001c8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c96:	f7fe faf3 	bl	8000280 <__aeabi_uldivmod>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ca2:	e053      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca4:	4b35      	ldr	r3, [pc, #212]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	099b      	lsrs	r3, r3, #6
 8001caa:	2200      	movs	r2, #0
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	617a      	str	r2, [r7, #20]
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001cb6:	f04f 0b00 	mov.w	fp, #0
 8001cba:	4652      	mov	r2, sl
 8001cbc:	465b      	mov	r3, fp
 8001cbe:	f04f 0000 	mov.w	r0, #0
 8001cc2:	f04f 0100 	mov.w	r1, #0
 8001cc6:	0159      	lsls	r1, r3, #5
 8001cc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ccc:	0150      	lsls	r0, r2, #5
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	ebb2 080a 	subs.w	r8, r2, sl
 8001cd6:	eb63 090b 	sbc.w	r9, r3, fp
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ce6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001cea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001cee:	ebb2 0408 	subs.w	r4, r2, r8
 8001cf2:	eb63 0509 	sbc.w	r5, r3, r9
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	00eb      	lsls	r3, r5, #3
 8001d00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d04:	00e2      	lsls	r2, r4, #3
 8001d06:	4614      	mov	r4, r2
 8001d08:	461d      	mov	r5, r3
 8001d0a:	eb14 030a 	adds.w	r3, r4, sl
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	eb45 030b 	adc.w	r3, r5, fp
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d22:	4629      	mov	r1, r5
 8001d24:	028b      	lsls	r3, r1, #10
 8001d26:	4621      	mov	r1, r4
 8001d28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d2c:	4621      	mov	r1, r4
 8001d2e:	028a      	lsls	r2, r1, #10
 8001d30:	4610      	mov	r0, r2
 8001d32:	4619      	mov	r1, r3
 8001d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d36:	2200      	movs	r2, #0
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	60fa      	str	r2, [r7, #12]
 8001d3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d40:	f7fe fa9e 	bl	8000280 <__aeabi_uldivmod>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4613      	mov	r3, r2
 8001d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	0c1b      	lsrs	r3, r3, #16
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	3301      	adds	r3, #1
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001d5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d66:	e002      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d6a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3740      	adds	r7, #64	; 0x40
 8001d74:	46bd      	mov	sp, r7
 8001d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	00f42400 	.word	0x00f42400
 8001d84:	017d7840 	.word	0x017d7840

08001d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d8c:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000000 	.word	0x20000000

08001da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001da4:	f7ff fff0 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	0a9b      	lsrs	r3, r3, #10
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4903      	ldr	r1, [pc, #12]	; (8001dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	08003de0 	.word	0x08003de0

08001dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dcc:	f7ff ffdc 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	0b5b      	lsrs	r3, r3, #13
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	4903      	ldr	r1, [pc, #12]	; (8001dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40023800 	.word	0x40023800
 8001dec:	08003de0 	.word	0x08003de0

08001df0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e041      	b.n	8001e86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d106      	bne.n	8001e1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7fe fdfe 	bl	8000a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4610      	mov	r0, r2
 8001e30:	f000 f888 	bl	8001f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d001      	beq.n	8001ea8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e03c      	b.n	8001f22 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a1e      	ldr	r2, [pc, #120]	; (8001f30 <HAL_TIM_Base_Start+0xa0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d018      	beq.n	8001eec <HAL_TIM_Base_Start+0x5c>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec2:	d013      	beq.n	8001eec <HAL_TIM_Base_Start+0x5c>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a1a      	ldr	r2, [pc, #104]	; (8001f34 <HAL_TIM_Base_Start+0xa4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00e      	beq.n	8001eec <HAL_TIM_Base_Start+0x5c>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a19      	ldr	r2, [pc, #100]	; (8001f38 <HAL_TIM_Base_Start+0xa8>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d009      	beq.n	8001eec <HAL_TIM_Base_Start+0x5c>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a17      	ldr	r2, [pc, #92]	; (8001f3c <HAL_TIM_Base_Start+0xac>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d004      	beq.n	8001eec <HAL_TIM_Base_Start+0x5c>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a16      	ldr	r2, [pc, #88]	; (8001f40 <HAL_TIM_Base_Start+0xb0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d111      	bne.n	8001f10 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2b06      	cmp	r3, #6
 8001efc:	d010      	beq.n	8001f20 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0201 	orr.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f0e:	e007      	b.n	8001f20 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40010000 	.word	0x40010000
 8001f34:	40000400 	.word	0x40000400
 8001f38:	40000800 	.word	0x40000800
 8001f3c:	40000c00 	.word	0x40000c00
 8001f40:	40014000 	.word	0x40014000

08001f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a3a      	ldr	r2, [pc, #232]	; (8002040 <TIM_Base_SetConfig+0xfc>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d00f      	beq.n	8001f7c <TIM_Base_SetConfig+0x38>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f62:	d00b      	beq.n	8001f7c <TIM_Base_SetConfig+0x38>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a37      	ldr	r2, [pc, #220]	; (8002044 <TIM_Base_SetConfig+0x100>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d007      	beq.n	8001f7c <TIM_Base_SetConfig+0x38>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a36      	ldr	r2, [pc, #216]	; (8002048 <TIM_Base_SetConfig+0x104>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d003      	beq.n	8001f7c <TIM_Base_SetConfig+0x38>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a35      	ldr	r2, [pc, #212]	; (800204c <TIM_Base_SetConfig+0x108>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d108      	bne.n	8001f8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a2b      	ldr	r2, [pc, #172]	; (8002040 <TIM_Base_SetConfig+0xfc>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d01b      	beq.n	8001fce <TIM_Base_SetConfig+0x8a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9c:	d017      	beq.n	8001fce <TIM_Base_SetConfig+0x8a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a28      	ldr	r2, [pc, #160]	; (8002044 <TIM_Base_SetConfig+0x100>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d013      	beq.n	8001fce <TIM_Base_SetConfig+0x8a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a27      	ldr	r2, [pc, #156]	; (8002048 <TIM_Base_SetConfig+0x104>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00f      	beq.n	8001fce <TIM_Base_SetConfig+0x8a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a26      	ldr	r2, [pc, #152]	; (800204c <TIM_Base_SetConfig+0x108>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00b      	beq.n	8001fce <TIM_Base_SetConfig+0x8a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a25      	ldr	r2, [pc, #148]	; (8002050 <TIM_Base_SetConfig+0x10c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d007      	beq.n	8001fce <TIM_Base_SetConfig+0x8a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a24      	ldr	r2, [pc, #144]	; (8002054 <TIM_Base_SetConfig+0x110>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d003      	beq.n	8001fce <TIM_Base_SetConfig+0x8a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a23      	ldr	r2, [pc, #140]	; (8002058 <TIM_Base_SetConfig+0x114>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d108      	bne.n	8001fe0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a0e      	ldr	r2, [pc, #56]	; (8002040 <TIM_Base_SetConfig+0xfc>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d103      	bne.n	8002014 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b01      	cmp	r3, #1
 8002024:	d105      	bne.n	8002032 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f023 0201 	bic.w	r2, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	611a      	str	r2, [r3, #16]
  }
}
 8002032:	bf00      	nop
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40010000 	.word	0x40010000
 8002044:	40000400 	.word	0x40000400
 8002048:	40000800 	.word	0x40000800
 800204c:	40000c00 	.word	0x40000c00
 8002050:	40014000 	.word	0x40014000
 8002054:	40014400 	.word	0x40014400
 8002058:	40014800 	.word	0x40014800

0800205c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e042      	b.n	80020f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d106      	bne.n	8002088 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7fe fcea 	bl	8000a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2224      	movs	r2, #36	; 0x24
 800208c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800209e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 fcdb 	bl	8002a5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2220      	movs	r2, #32
 80020e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	4613      	mov	r3, r2
 8002108:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b20      	cmp	r3, #32
 8002114:	d112      	bne.n	800213c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d002      	beq.n	8002122 <HAL_UART_Receive_IT+0x26>
 800211c:	88fb      	ldrh	r3, [r7, #6]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e00b      	b.n	800213e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800212c:	88fb      	ldrh	r3, [r7, #6]
 800212e:	461a      	mov	r2, r3
 8002130:	68b9      	ldr	r1, [r7, #8]
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 faba 	bl	80026ac <UART_Start_Receive_IT>
 8002138:	4603      	mov	r3, r0
 800213a:	e000      	b.n	800213e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800213c:	2302      	movs	r3, #2
  }
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b0ba      	sub	sp, #232	; 0xe8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002174:	2300      	movs	r3, #0
 8002176:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800217a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002186:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10f      	bne.n	80021ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800218e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <HAL_UART_IRQHandler+0x66>
 800219a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800219e:	f003 0320 	and.w	r3, r3, #32
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 fb99 	bl	80028de <UART_Receive_IT>
      return;
 80021ac:	e25b      	b.n	8002666 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80021ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 80de 	beq.w	8002374 <HAL_UART_IRQHandler+0x22c>
 80021b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d106      	bne.n	80021d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 80d1 	beq.w	8002374 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00b      	beq.n	80021f6 <HAL_UART_IRQHandler+0xae>
 80021de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	f043 0201 	orr.w	r2, r3, #1
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <HAL_UART_IRQHandler+0xd2>
 8002202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d005      	beq.n	800221a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	f043 0202 	orr.w	r2, r3, #2
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800221a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00b      	beq.n	800223e <HAL_UART_IRQHandler+0xf6>
 8002226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	f043 0204 	orr.w	r2, r3, #4
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800223e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d011      	beq.n	800226e <HAL_UART_IRQHandler+0x126>
 800224a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	2b00      	cmp	r3, #0
 8002254:	d105      	bne.n	8002262 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	f043 0208 	orr.w	r2, r3, #8
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 81f2 	beq.w	800265c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b00      	cmp	r3, #0
 8002282:	d008      	beq.n	8002296 <HAL_UART_IRQHandler+0x14e>
 8002284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002288:	f003 0320 	and.w	r3, r3, #32
 800228c:	2b00      	cmp	r3, #0
 800228e:	d002      	beq.n	8002296 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 fb24 	bl	80028de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a0:	2b40      	cmp	r3, #64	; 0x40
 80022a2:	bf0c      	ite	eq
 80022a4:	2301      	moveq	r3, #1
 80022a6:	2300      	movne	r3, #0
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d103      	bne.n	80022c2 <HAL_UART_IRQHandler+0x17a>
 80022ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d04f      	beq.n	8002362 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 fa2c 	bl	8002720 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d2:	2b40      	cmp	r3, #64	; 0x40
 80022d4:	d141      	bne.n	800235a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	3314      	adds	r3, #20
 80022dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022e4:	e853 3f00 	ldrex	r3, [r3]
 80022e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80022ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	3314      	adds	r3, #20
 80022fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002302:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002306:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800230a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800230e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002312:	e841 2300 	strex	r3, r2, [r1]
 8002316:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800231a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1d9      	bne.n	80022d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002326:	2b00      	cmp	r3, #0
 8002328:	d013      	beq.n	8002352 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232e:	4a7e      	ldr	r2, [pc, #504]	; (8002528 <HAL_UART_IRQHandler+0x3e0>)
 8002330:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe ff41 	bl	80011be <HAL_DMA_Abort_IT>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d016      	beq.n	8002370 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800234c:	4610      	mov	r0, r2
 800234e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002350:	e00e      	b.n	8002370 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f994 	bl	8002680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002358:	e00a      	b.n	8002370 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f990 	bl	8002680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002360:	e006      	b.n	8002370 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f98c 	bl	8002680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800236e:	e175      	b.n	800265c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002370:	bf00      	nop
    return;
 8002372:	e173      	b.n	800265c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	2b01      	cmp	r3, #1
 800237a:	f040 814f 	bne.w	800261c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800237e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 8148 	beq.w	800261c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800238c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002390:	f003 0310 	and.w	r3, r3, #16
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 8141 	beq.w	800261c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ba:	2b40      	cmp	r3, #64	; 0x40
 80023bc:	f040 80b6 	bne.w	800252c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80023cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 8145 	beq.w	8002660 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80023de:	429a      	cmp	r2, r3
 80023e0:	f080 813e 	bcs.w	8002660 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80023ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023f6:	f000 8088 	beq.w	800250a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	330c      	adds	r3, #12
 8002400:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002404:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002408:	e853 3f00 	ldrex	r3, [r3]
 800240c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002410:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002418:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	330c      	adds	r3, #12
 8002422:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002426:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800242a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800242e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002432:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002436:	e841 2300 	strex	r3, r2, [r1]
 800243a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800243e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1d9      	bne.n	80023fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3314      	adds	r3, #20
 800244c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800244e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002450:	e853 3f00 	ldrex	r3, [r3]
 8002454:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002456:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	3314      	adds	r3, #20
 8002466:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800246a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800246e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002470:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002472:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002476:	e841 2300 	strex	r3, r2, [r1]
 800247a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800247c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1e1      	bne.n	8002446 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3314      	adds	r3, #20
 8002488:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800248a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800248c:	e853 3f00 	ldrex	r3, [r3]
 8002490:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002494:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002498:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	3314      	adds	r3, #20
 80024a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80024a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80024a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80024ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80024ae:	e841 2300 	strex	r3, r2, [r1]
 80024b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80024b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1e3      	bne.n	8002482 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2220      	movs	r2, #32
 80024be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	330c      	adds	r3, #12
 80024ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d2:	e853 3f00 	ldrex	r3, [r3]
 80024d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80024d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024da:	f023 0310 	bic.w	r3, r3, #16
 80024de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	330c      	adds	r3, #12
 80024e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80024ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80024ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80024f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024f4:	e841 2300 	strex	r3, r2, [r1]
 80024f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80024fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1e3      	bne.n	80024c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe fdea 	bl	80010de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2202      	movs	r2, #2
 800250e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002518:	b29b      	uxth	r3, r3
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	b29b      	uxth	r3, r3
 800251e:	4619      	mov	r1, r3
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f8b7 	bl	8002694 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002526:	e09b      	b.n	8002660 <HAL_UART_IRQHandler+0x518>
 8002528:	080027e7 	.word	0x080027e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002534:	b29b      	uxth	r3, r3
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002540:	b29b      	uxth	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 808e 	beq.w	8002664 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002548:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 8089 	beq.w	8002664 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	330c      	adds	r3, #12
 8002558:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800255a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255c:	e853 3f00 	ldrex	r3, [r3]
 8002560:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002564:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002568:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	330c      	adds	r3, #12
 8002572:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002576:	647a      	str	r2, [r7, #68]	; 0x44
 8002578:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800257a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800257c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800257e:	e841 2300 	strex	r3, r2, [r1]
 8002582:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1e3      	bne.n	8002552 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	3314      	adds	r3, #20
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	e853 3f00 	ldrex	r3, [r3]
 8002598:	623b      	str	r3, [r7, #32]
   return(result);
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	f023 0301 	bic.w	r3, r3, #1
 80025a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	3314      	adds	r3, #20
 80025aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80025ae:	633a      	str	r2, [r7, #48]	; 0x30
 80025b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025b6:	e841 2300 	strex	r3, r2, [r1]
 80025ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80025bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1e3      	bne.n	800258a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2220      	movs	r2, #32
 80025c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	330c      	adds	r3, #12
 80025d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	e853 3f00 	ldrex	r3, [r3]
 80025de:	60fb      	str	r3, [r7, #12]
   return(result);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f023 0310 	bic.w	r3, r3, #16
 80025e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	330c      	adds	r3, #12
 80025f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80025f4:	61fa      	str	r2, [r7, #28]
 80025f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f8:	69b9      	ldr	r1, [r7, #24]
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	e841 2300 	strex	r3, r2, [r1]
 8002600:	617b      	str	r3, [r7, #20]
   return(result);
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1e3      	bne.n	80025d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800260e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002612:	4619      	mov	r1, r3
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f83d 	bl	8002694 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800261a:	e023      	b.n	8002664 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800261c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002624:	2b00      	cmp	r3, #0
 8002626:	d009      	beq.n	800263c <HAL_UART_IRQHandler+0x4f4>
 8002628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800262c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f8ea 	bl	800280e <UART_Transmit_IT>
    return;
 800263a:	e014      	b.n	8002666 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800263c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00e      	beq.n	8002666 <HAL_UART_IRQHandler+0x51e>
 8002648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800264c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f92a 	bl	80028ae <UART_EndTransmit_IT>
    return;
 800265a:	e004      	b.n	8002666 <HAL_UART_IRQHandler+0x51e>
    return;
 800265c:	bf00      	nop
 800265e:	e002      	b.n	8002666 <HAL_UART_IRQHandler+0x51e>
      return;
 8002660:	bf00      	nop
 8002662:	e000      	b.n	8002666 <HAL_UART_IRQHandler+0x51e>
      return;
 8002664:	bf00      	nop
  }
}
 8002666:	37e8      	adds	r7, #232	; 0xe8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	4613      	mov	r3, r2
 80026b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	88fa      	ldrh	r2, [r7, #6]
 80026c4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	88fa      	ldrh	r2, [r7, #6]
 80026ca:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2222      	movs	r2, #34	; 0x22
 80026d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026f0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695a      	ldr	r2, [r3, #20]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f042 0201 	orr.w	r2, r2, #1
 8002700:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f042 0220 	orr.w	r2, r2, #32
 8002710:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002720:	b480      	push	{r7}
 8002722:	b095      	sub	sp, #84	; 0x54
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	330c      	adds	r3, #12
 800272e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002732:	e853 3f00 	ldrex	r3, [r3]
 8002736:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800273e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	330c      	adds	r3, #12
 8002746:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002748:	643a      	str	r2, [r7, #64]	; 0x40
 800274a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800274c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800274e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002750:	e841 2300 	strex	r3, r2, [r1]
 8002754:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1e5      	bne.n	8002728 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	3314      	adds	r3, #20
 8002762:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	e853 3f00 	ldrex	r3, [r3]
 800276a:	61fb      	str	r3, [r7, #28]
   return(result);
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f023 0301 	bic.w	r3, r3, #1
 8002772:	64bb      	str	r3, [r7, #72]	; 0x48
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	3314      	adds	r3, #20
 800277a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800277c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002784:	e841 2300 	strex	r3, r2, [r1]
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1e5      	bne.n	800275c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	2b01      	cmp	r3, #1
 8002796:	d119      	bne.n	80027cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	330c      	adds	r3, #12
 800279e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	e853 3f00 	ldrex	r3, [r3]
 80027a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f023 0310 	bic.w	r3, r3, #16
 80027ae:	647b      	str	r3, [r7, #68]	; 0x44
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	330c      	adds	r3, #12
 80027b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027b8:	61ba      	str	r2, [r7, #24]
 80027ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027bc:	6979      	ldr	r1, [r7, #20]
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	e841 2300 	strex	r3, r2, [r1]
 80027c4:	613b      	str	r3, [r7, #16]
   return(result);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1e5      	bne.n	8002798 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80027da:	bf00      	nop
 80027dc:	3754      	adds	r7, #84	; 0x54
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f7ff ff3d 	bl	8002680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800280e:	b480      	push	{r7}
 8002810:	b085      	sub	sp, #20
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b21      	cmp	r3, #33	; 0x21
 8002820:	d13e      	bne.n	80028a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282a:	d114      	bne.n	8002856 <UART_Transmit_IT+0x48>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d110      	bne.n	8002856 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002848:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	1c9a      	adds	r2, r3, #2
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	621a      	str	r2, [r3, #32]
 8002854:	e008      	b.n	8002868 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	1c59      	adds	r1, r3, #1
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6211      	str	r1, [r2, #32]
 8002860:	781a      	ldrb	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29b      	uxth	r3, r3
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	4619      	mov	r1, r3
 8002876:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10f      	bne.n	800289c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800288a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800289a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	e000      	b.n	80028a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80028a0:	2302      	movs	r3, #2
  }
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2220      	movs	r2, #32
 80028ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff fecc 	bl	800266c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b08c      	sub	sp, #48	; 0x30
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b22      	cmp	r3, #34	; 0x22
 80028f0:	f040 80ae 	bne.w	8002a50 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fc:	d117      	bne.n	800292e <UART_Receive_IT+0x50>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d113      	bne.n	800292e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002906:	2300      	movs	r3, #0
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	b29b      	uxth	r3, r3
 8002918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800291c:	b29a      	uxth	r2, r3
 800291e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002920:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002926:	1c9a      	adds	r2, r3, #2
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	629a      	str	r2, [r3, #40]	; 0x28
 800292c:	e026      	b.n	800297c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002934:	2300      	movs	r3, #0
 8002936:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002940:	d007      	beq.n	8002952 <UART_Receive_IT+0x74>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10a      	bne.n	8002960 <UART_Receive_IT+0x82>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	b2da      	uxtb	r2, r3
 800295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295c:	701a      	strb	r2, [r3, #0]
 800295e:	e008      	b.n	8002972 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	b2db      	uxtb	r3, r3
 8002968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800296c:	b2da      	uxtb	r2, r3
 800296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002970:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29b      	uxth	r3, r3
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	4619      	mov	r1, r3
 800298a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800298c:	2b00      	cmp	r3, #0
 800298e:	d15d      	bne.n	8002a4c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0220 	bic.w	r2, r2, #32
 800299e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0201 	bic.w	r2, r2, #1
 80029be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d135      	bne.n	8002a42 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	330c      	adds	r3, #12
 80029e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	e853 3f00 	ldrex	r3, [r3]
 80029ea:	613b      	str	r3, [r7, #16]
   return(result);
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f023 0310 	bic.w	r3, r3, #16
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	330c      	adds	r3, #12
 80029fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fc:	623a      	str	r2, [r7, #32]
 80029fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a00:	69f9      	ldr	r1, [r7, #28]
 8002a02:	6a3a      	ldr	r2, [r7, #32]
 8002a04:	e841 2300 	strex	r3, r2, [r1]
 8002a08:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1e5      	bne.n	80029dc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0310 	and.w	r3, r3, #16
 8002a1a:	2b10      	cmp	r3, #16
 8002a1c:	d10a      	bne.n	8002a34 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a38:	4619      	mov	r1, r3
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff fe2a 	bl	8002694 <HAL_UARTEx_RxEventCallback>
 8002a40:	e002      	b.n	8002a48 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fe f93e 	bl	8000cc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	e002      	b.n	8002a52 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e000      	b.n	8002a52 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002a50:	2302      	movs	r3, #2
  }
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3730      	adds	r7, #48	; 0x30
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a60:	b0c0      	sub	sp, #256	; 0x100
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a78:	68d9      	ldr	r1, [r3, #12]
 8002a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	ea40 0301 	orr.w	r3, r0, r1
 8002a84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ab4:	f021 010c 	bic.w	r1, r1, #12
 8002ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ac2:	430b      	orrs	r3, r1
 8002ac4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad6:	6999      	ldr	r1, [r3, #24]
 8002ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	ea40 0301 	orr.w	r3, r0, r1
 8002ae2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	4b8f      	ldr	r3, [pc, #572]	; (8002d28 <UART_SetConfig+0x2cc>)
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d005      	beq.n	8002afc <UART_SetConfig+0xa0>
 8002af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	4b8d      	ldr	r3, [pc, #564]	; (8002d2c <UART_SetConfig+0x2d0>)
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d104      	bne.n	8002b06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002afc:	f7ff f964 	bl	8001dc8 <HAL_RCC_GetPCLK2Freq>
 8002b00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b04:	e003      	b.n	8002b0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b06:	f7ff f94b 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8002b0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b18:	f040 810c 	bne.w	8002d34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b20:	2200      	movs	r2, #0
 8002b22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b2e:	4622      	mov	r2, r4
 8002b30:	462b      	mov	r3, r5
 8002b32:	1891      	adds	r1, r2, r2
 8002b34:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b36:	415b      	adcs	r3, r3
 8002b38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b3e:	4621      	mov	r1, r4
 8002b40:	eb12 0801 	adds.w	r8, r2, r1
 8002b44:	4629      	mov	r1, r5
 8002b46:	eb43 0901 	adc.w	r9, r3, r1
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	f04f 0300 	mov.w	r3, #0
 8002b52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b5e:	4690      	mov	r8, r2
 8002b60:	4699      	mov	r9, r3
 8002b62:	4623      	mov	r3, r4
 8002b64:	eb18 0303 	adds.w	r3, r8, r3
 8002b68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b6c:	462b      	mov	r3, r5
 8002b6e:	eb49 0303 	adc.w	r3, r9, r3
 8002b72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	18db      	adds	r3, r3, r3
 8002b8e:	653b      	str	r3, [r7, #80]	; 0x50
 8002b90:	4613      	mov	r3, r2
 8002b92:	eb42 0303 	adc.w	r3, r2, r3
 8002b96:	657b      	str	r3, [r7, #84]	; 0x54
 8002b98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ba0:	f7fd fb6e 	bl	8000280 <__aeabi_uldivmod>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4b61      	ldr	r3, [pc, #388]	; (8002d30 <UART_SetConfig+0x2d4>)
 8002baa:	fba3 2302 	umull	r2, r3, r3, r2
 8002bae:	095b      	lsrs	r3, r3, #5
 8002bb0:	011c      	lsls	r4, r3, #4
 8002bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002bc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002bc4:	4642      	mov	r2, r8
 8002bc6:	464b      	mov	r3, r9
 8002bc8:	1891      	adds	r1, r2, r2
 8002bca:	64b9      	str	r1, [r7, #72]	; 0x48
 8002bcc:	415b      	adcs	r3, r3
 8002bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bd4:	4641      	mov	r1, r8
 8002bd6:	eb12 0a01 	adds.w	sl, r2, r1
 8002bda:	4649      	mov	r1, r9
 8002bdc:	eb43 0b01 	adc.w	fp, r3, r1
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bf4:	4692      	mov	sl, r2
 8002bf6:	469b      	mov	fp, r3
 8002bf8:	4643      	mov	r3, r8
 8002bfa:	eb1a 0303 	adds.w	r3, sl, r3
 8002bfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c02:	464b      	mov	r3, r9
 8002c04:	eb4b 0303 	adc.w	r3, fp, r3
 8002c08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c20:	460b      	mov	r3, r1
 8002c22:	18db      	adds	r3, r3, r3
 8002c24:	643b      	str	r3, [r7, #64]	; 0x40
 8002c26:	4613      	mov	r3, r2
 8002c28:	eb42 0303 	adc.w	r3, r2, r3
 8002c2c:	647b      	str	r3, [r7, #68]	; 0x44
 8002c2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c36:	f7fd fb23 	bl	8000280 <__aeabi_uldivmod>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4b3b      	ldr	r3, [pc, #236]	; (8002d30 <UART_SetConfig+0x2d4>)
 8002c42:	fba3 2301 	umull	r2, r3, r3, r1
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	2264      	movs	r2, #100	; 0x64
 8002c4a:	fb02 f303 	mul.w	r3, r2, r3
 8002c4e:	1acb      	subs	r3, r1, r3
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c56:	4b36      	ldr	r3, [pc, #216]	; (8002d30 <UART_SetConfig+0x2d4>)
 8002c58:	fba3 2302 	umull	r2, r3, r3, r2
 8002c5c:	095b      	lsrs	r3, r3, #5
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c64:	441c      	add	r4, r3
 8002c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c78:	4642      	mov	r2, r8
 8002c7a:	464b      	mov	r3, r9
 8002c7c:	1891      	adds	r1, r2, r2
 8002c7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c80:	415b      	adcs	r3, r3
 8002c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c88:	4641      	mov	r1, r8
 8002c8a:	1851      	adds	r1, r2, r1
 8002c8c:	6339      	str	r1, [r7, #48]	; 0x30
 8002c8e:	4649      	mov	r1, r9
 8002c90:	414b      	adcs	r3, r1
 8002c92:	637b      	str	r3, [r7, #52]	; 0x34
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ca0:	4659      	mov	r1, fp
 8002ca2:	00cb      	lsls	r3, r1, #3
 8002ca4:	4651      	mov	r1, sl
 8002ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002caa:	4651      	mov	r1, sl
 8002cac:	00ca      	lsls	r2, r1, #3
 8002cae:	4610      	mov	r0, r2
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	4642      	mov	r2, r8
 8002cb6:	189b      	adds	r3, r3, r2
 8002cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cbc:	464b      	mov	r3, r9
 8002cbe:	460a      	mov	r2, r1
 8002cc0:	eb42 0303 	adc.w	r3, r2, r3
 8002cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002cd4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002cd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002cdc:	460b      	mov	r3, r1
 8002cde:	18db      	adds	r3, r3, r3
 8002ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	eb42 0303 	adc.w	r3, r2, r3
 8002ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002cf2:	f7fd fac5 	bl	8000280 <__aeabi_uldivmod>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4b0d      	ldr	r3, [pc, #52]	; (8002d30 <UART_SetConfig+0x2d4>)
 8002cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8002d00:	095b      	lsrs	r3, r3, #5
 8002d02:	2164      	movs	r1, #100	; 0x64
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	3332      	adds	r3, #50	; 0x32
 8002d0e:	4a08      	ldr	r2, [pc, #32]	; (8002d30 <UART_SetConfig+0x2d4>)
 8002d10:	fba2 2303 	umull	r2, r3, r2, r3
 8002d14:	095b      	lsrs	r3, r3, #5
 8002d16:	f003 0207 	and.w	r2, r3, #7
 8002d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4422      	add	r2, r4
 8002d22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d24:	e106      	b.n	8002f34 <UART_SetConfig+0x4d8>
 8002d26:	bf00      	nop
 8002d28:	40011000 	.word	0x40011000
 8002d2c:	40011400 	.word	0x40011400
 8002d30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d46:	4642      	mov	r2, r8
 8002d48:	464b      	mov	r3, r9
 8002d4a:	1891      	adds	r1, r2, r2
 8002d4c:	6239      	str	r1, [r7, #32]
 8002d4e:	415b      	adcs	r3, r3
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
 8002d52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d56:	4641      	mov	r1, r8
 8002d58:	1854      	adds	r4, r2, r1
 8002d5a:	4649      	mov	r1, r9
 8002d5c:	eb43 0501 	adc.w	r5, r3, r1
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	00eb      	lsls	r3, r5, #3
 8002d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d6e:	00e2      	lsls	r2, r4, #3
 8002d70:	4614      	mov	r4, r2
 8002d72:	461d      	mov	r5, r3
 8002d74:	4643      	mov	r3, r8
 8002d76:	18e3      	adds	r3, r4, r3
 8002d78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d7c:	464b      	mov	r3, r9
 8002d7e:	eb45 0303 	adc.w	r3, r5, r3
 8002d82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002da2:	4629      	mov	r1, r5
 8002da4:	008b      	lsls	r3, r1, #2
 8002da6:	4621      	mov	r1, r4
 8002da8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dac:	4621      	mov	r1, r4
 8002dae:	008a      	lsls	r2, r1, #2
 8002db0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002db4:	f7fd fa64 	bl	8000280 <__aeabi_uldivmod>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4b60      	ldr	r3, [pc, #384]	; (8002f40 <UART_SetConfig+0x4e4>)
 8002dbe:	fba3 2302 	umull	r2, r3, r3, r2
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	011c      	lsls	r4, r3, #4
 8002dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002dd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002dd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002dd8:	4642      	mov	r2, r8
 8002dda:	464b      	mov	r3, r9
 8002ddc:	1891      	adds	r1, r2, r2
 8002dde:	61b9      	str	r1, [r7, #24]
 8002de0:	415b      	adcs	r3, r3
 8002de2:	61fb      	str	r3, [r7, #28]
 8002de4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002de8:	4641      	mov	r1, r8
 8002dea:	1851      	adds	r1, r2, r1
 8002dec:	6139      	str	r1, [r7, #16]
 8002dee:	4649      	mov	r1, r9
 8002df0:	414b      	adcs	r3, r1
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e00:	4659      	mov	r1, fp
 8002e02:	00cb      	lsls	r3, r1, #3
 8002e04:	4651      	mov	r1, sl
 8002e06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e0a:	4651      	mov	r1, sl
 8002e0c:	00ca      	lsls	r2, r1, #3
 8002e0e:	4610      	mov	r0, r2
 8002e10:	4619      	mov	r1, r3
 8002e12:	4603      	mov	r3, r0
 8002e14:	4642      	mov	r2, r8
 8002e16:	189b      	adds	r3, r3, r2
 8002e18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e1c:	464b      	mov	r3, r9
 8002e1e:	460a      	mov	r2, r1
 8002e20:	eb42 0303 	adc.w	r3, r2, r3
 8002e24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e40:	4649      	mov	r1, r9
 8002e42:	008b      	lsls	r3, r1, #2
 8002e44:	4641      	mov	r1, r8
 8002e46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e4a:	4641      	mov	r1, r8
 8002e4c:	008a      	lsls	r2, r1, #2
 8002e4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e52:	f7fd fa15 	bl	8000280 <__aeabi_uldivmod>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4b38      	ldr	r3, [pc, #224]	; (8002f40 <UART_SetConfig+0x4e4>)
 8002e5e:	fba3 2301 	umull	r2, r3, r3, r1
 8002e62:	095b      	lsrs	r3, r3, #5
 8002e64:	2264      	movs	r2, #100	; 0x64
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
 8002e6a:	1acb      	subs	r3, r1, r3
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	3332      	adds	r3, #50	; 0x32
 8002e70:	4a33      	ldr	r2, [pc, #204]	; (8002f40 <UART_SetConfig+0x4e4>)
 8002e72:	fba2 2303 	umull	r2, r3, r2, r3
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e7c:	441c      	add	r4, r3
 8002e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e82:	2200      	movs	r2, #0
 8002e84:	673b      	str	r3, [r7, #112]	; 0x70
 8002e86:	677a      	str	r2, [r7, #116]	; 0x74
 8002e88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e8c:	4642      	mov	r2, r8
 8002e8e:	464b      	mov	r3, r9
 8002e90:	1891      	adds	r1, r2, r2
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	415b      	adcs	r3, r3
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e9c:	4641      	mov	r1, r8
 8002e9e:	1851      	adds	r1, r2, r1
 8002ea0:	6039      	str	r1, [r7, #0]
 8002ea2:	4649      	mov	r1, r9
 8002ea4:	414b      	adcs	r3, r1
 8002ea6:	607b      	str	r3, [r7, #4]
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002eb4:	4659      	mov	r1, fp
 8002eb6:	00cb      	lsls	r3, r1, #3
 8002eb8:	4651      	mov	r1, sl
 8002eba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ebe:	4651      	mov	r1, sl
 8002ec0:	00ca      	lsls	r2, r1, #3
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4642      	mov	r2, r8
 8002eca:	189b      	adds	r3, r3, r2
 8002ecc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ece:	464b      	mov	r3, r9
 8002ed0:	460a      	mov	r2, r1
 8002ed2:	eb42 0303 	adc.w	r3, r2, r3
 8002ed6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	663b      	str	r3, [r7, #96]	; 0x60
 8002ee2:	667a      	str	r2, [r7, #100]	; 0x64
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002ef0:	4649      	mov	r1, r9
 8002ef2:	008b      	lsls	r3, r1, #2
 8002ef4:	4641      	mov	r1, r8
 8002ef6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002efa:	4641      	mov	r1, r8
 8002efc:	008a      	lsls	r2, r1, #2
 8002efe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f02:	f7fd f9bd 	bl	8000280 <__aeabi_uldivmod>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <UART_SetConfig+0x4e4>)
 8002f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f10:	095b      	lsrs	r3, r3, #5
 8002f12:	2164      	movs	r1, #100	; 0x64
 8002f14:	fb01 f303 	mul.w	r3, r1, r3
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	3332      	adds	r3, #50	; 0x32
 8002f1e:	4a08      	ldr	r2, [pc, #32]	; (8002f40 <UART_SetConfig+0x4e4>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	095b      	lsrs	r3, r3, #5
 8002f26:	f003 020f 	and.w	r2, r3, #15
 8002f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4422      	add	r2, r4
 8002f32:	609a      	str	r2, [r3, #8]
}
 8002f34:	bf00      	nop
 8002f36:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f40:	51eb851f 	.word	0x51eb851f

08002f44 <std>:
 8002f44:	2300      	movs	r3, #0
 8002f46:	b510      	push	{r4, lr}
 8002f48:	4604      	mov	r4, r0
 8002f4a:	e9c0 3300 	strd	r3, r3, [r0]
 8002f4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f52:	6083      	str	r3, [r0, #8]
 8002f54:	8181      	strh	r1, [r0, #12]
 8002f56:	6643      	str	r3, [r0, #100]	; 0x64
 8002f58:	81c2      	strh	r2, [r0, #14]
 8002f5a:	6183      	str	r3, [r0, #24]
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	2208      	movs	r2, #8
 8002f60:	305c      	adds	r0, #92	; 0x5c
 8002f62:	f000 f906 	bl	8003172 <memset>
 8002f66:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <std+0x58>)
 8002f68:	6263      	str	r3, [r4, #36]	; 0x24
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <std+0x5c>)
 8002f6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f6e:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <std+0x60>)
 8002f70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f72:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <std+0x64>)
 8002f74:	6323      	str	r3, [r4, #48]	; 0x30
 8002f76:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <std+0x68>)
 8002f78:	6224      	str	r4, [r4, #32]
 8002f7a:	429c      	cmp	r4, r3
 8002f7c:	d006      	beq.n	8002f8c <std+0x48>
 8002f7e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002f82:	4294      	cmp	r4, r2
 8002f84:	d002      	beq.n	8002f8c <std+0x48>
 8002f86:	33d0      	adds	r3, #208	; 0xd0
 8002f88:	429c      	cmp	r4, r3
 8002f8a:	d105      	bne.n	8002f98 <std+0x54>
 8002f8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f94:	f000 b966 	b.w	8003264 <__retarget_lock_init_recursive>
 8002f98:	bd10      	pop	{r4, pc}
 8002f9a:	bf00      	nop
 8002f9c:	080030ed 	.word	0x080030ed
 8002fa0:	0800310f 	.word	0x0800310f
 8002fa4:	08003147 	.word	0x08003147
 8002fa8:	0800316b 	.word	0x0800316b
 8002fac:	20000228 	.word	0x20000228

08002fb0 <stdio_exit_handler>:
 8002fb0:	4a02      	ldr	r2, [pc, #8]	; (8002fbc <stdio_exit_handler+0xc>)
 8002fb2:	4903      	ldr	r1, [pc, #12]	; (8002fc0 <stdio_exit_handler+0x10>)
 8002fb4:	4803      	ldr	r0, [pc, #12]	; (8002fc4 <stdio_exit_handler+0x14>)
 8002fb6:	f000 b869 	b.w	800308c <_fwalk_sglue>
 8002fba:	bf00      	nop
 8002fbc:	2000000c 	.word	0x2000000c
 8002fc0:	08003b11 	.word	0x08003b11
 8002fc4:	20000018 	.word	0x20000018

08002fc8 <cleanup_stdio>:
 8002fc8:	6841      	ldr	r1, [r0, #4]
 8002fca:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <cleanup_stdio+0x34>)
 8002fcc:	4299      	cmp	r1, r3
 8002fce:	b510      	push	{r4, lr}
 8002fd0:	4604      	mov	r4, r0
 8002fd2:	d001      	beq.n	8002fd8 <cleanup_stdio+0x10>
 8002fd4:	f000 fd9c 	bl	8003b10 <_fflush_r>
 8002fd8:	68a1      	ldr	r1, [r4, #8]
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <cleanup_stdio+0x38>)
 8002fdc:	4299      	cmp	r1, r3
 8002fde:	d002      	beq.n	8002fe6 <cleanup_stdio+0x1e>
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	f000 fd95 	bl	8003b10 <_fflush_r>
 8002fe6:	68e1      	ldr	r1, [r4, #12]
 8002fe8:	4b06      	ldr	r3, [pc, #24]	; (8003004 <cleanup_stdio+0x3c>)
 8002fea:	4299      	cmp	r1, r3
 8002fec:	d004      	beq.n	8002ff8 <cleanup_stdio+0x30>
 8002fee:	4620      	mov	r0, r4
 8002ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ff4:	f000 bd8c 	b.w	8003b10 <_fflush_r>
 8002ff8:	bd10      	pop	{r4, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000228 	.word	0x20000228
 8003000:	20000290 	.word	0x20000290
 8003004:	200002f8 	.word	0x200002f8

08003008 <global_stdio_init.part.0>:
 8003008:	b510      	push	{r4, lr}
 800300a:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <global_stdio_init.part.0+0x30>)
 800300c:	4c0b      	ldr	r4, [pc, #44]	; (800303c <global_stdio_init.part.0+0x34>)
 800300e:	4a0c      	ldr	r2, [pc, #48]	; (8003040 <global_stdio_init.part.0+0x38>)
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	4620      	mov	r0, r4
 8003014:	2200      	movs	r2, #0
 8003016:	2104      	movs	r1, #4
 8003018:	f7ff ff94 	bl	8002f44 <std>
 800301c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003020:	2201      	movs	r2, #1
 8003022:	2109      	movs	r1, #9
 8003024:	f7ff ff8e 	bl	8002f44 <std>
 8003028:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800302c:	2202      	movs	r2, #2
 800302e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003032:	2112      	movs	r1, #18
 8003034:	f7ff bf86 	b.w	8002f44 <std>
 8003038:	20000360 	.word	0x20000360
 800303c:	20000228 	.word	0x20000228
 8003040:	08002fb1 	.word	0x08002fb1

08003044 <__sfp_lock_acquire>:
 8003044:	4801      	ldr	r0, [pc, #4]	; (800304c <__sfp_lock_acquire+0x8>)
 8003046:	f000 b90e 	b.w	8003266 <__retarget_lock_acquire_recursive>
 800304a:	bf00      	nop
 800304c:	20000369 	.word	0x20000369

08003050 <__sfp_lock_release>:
 8003050:	4801      	ldr	r0, [pc, #4]	; (8003058 <__sfp_lock_release+0x8>)
 8003052:	f000 b909 	b.w	8003268 <__retarget_lock_release_recursive>
 8003056:	bf00      	nop
 8003058:	20000369 	.word	0x20000369

0800305c <__sinit>:
 800305c:	b510      	push	{r4, lr}
 800305e:	4604      	mov	r4, r0
 8003060:	f7ff fff0 	bl	8003044 <__sfp_lock_acquire>
 8003064:	6a23      	ldr	r3, [r4, #32]
 8003066:	b11b      	cbz	r3, 8003070 <__sinit+0x14>
 8003068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800306c:	f7ff bff0 	b.w	8003050 <__sfp_lock_release>
 8003070:	4b04      	ldr	r3, [pc, #16]	; (8003084 <__sinit+0x28>)
 8003072:	6223      	str	r3, [r4, #32]
 8003074:	4b04      	ldr	r3, [pc, #16]	; (8003088 <__sinit+0x2c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f5      	bne.n	8003068 <__sinit+0xc>
 800307c:	f7ff ffc4 	bl	8003008 <global_stdio_init.part.0>
 8003080:	e7f2      	b.n	8003068 <__sinit+0xc>
 8003082:	bf00      	nop
 8003084:	08002fc9 	.word	0x08002fc9
 8003088:	20000360 	.word	0x20000360

0800308c <_fwalk_sglue>:
 800308c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003090:	4607      	mov	r7, r0
 8003092:	4688      	mov	r8, r1
 8003094:	4614      	mov	r4, r2
 8003096:	2600      	movs	r6, #0
 8003098:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800309c:	f1b9 0901 	subs.w	r9, r9, #1
 80030a0:	d505      	bpl.n	80030ae <_fwalk_sglue+0x22>
 80030a2:	6824      	ldr	r4, [r4, #0]
 80030a4:	2c00      	cmp	r4, #0
 80030a6:	d1f7      	bne.n	8003098 <_fwalk_sglue+0xc>
 80030a8:	4630      	mov	r0, r6
 80030aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030ae:	89ab      	ldrh	r3, [r5, #12]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d907      	bls.n	80030c4 <_fwalk_sglue+0x38>
 80030b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80030b8:	3301      	adds	r3, #1
 80030ba:	d003      	beq.n	80030c4 <_fwalk_sglue+0x38>
 80030bc:	4629      	mov	r1, r5
 80030be:	4638      	mov	r0, r7
 80030c0:	47c0      	blx	r8
 80030c2:	4306      	orrs	r6, r0
 80030c4:	3568      	adds	r5, #104	; 0x68
 80030c6:	e7e9      	b.n	800309c <_fwalk_sglue+0x10>

080030c8 <iprintf>:
 80030c8:	b40f      	push	{r0, r1, r2, r3}
 80030ca:	b507      	push	{r0, r1, r2, lr}
 80030cc:	4906      	ldr	r1, [pc, #24]	; (80030e8 <iprintf+0x20>)
 80030ce:	ab04      	add	r3, sp, #16
 80030d0:	6808      	ldr	r0, [r1, #0]
 80030d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80030d6:	6881      	ldr	r1, [r0, #8]
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	f000 f9e9 	bl	80034b0 <_vfiprintf_r>
 80030de:	b003      	add	sp, #12
 80030e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80030e4:	b004      	add	sp, #16
 80030e6:	4770      	bx	lr
 80030e8:	20000064 	.word	0x20000064

080030ec <__sread>:
 80030ec:	b510      	push	{r4, lr}
 80030ee:	460c      	mov	r4, r1
 80030f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030f4:	f000 f868 	bl	80031c8 <_read_r>
 80030f8:	2800      	cmp	r0, #0
 80030fa:	bfab      	itete	ge
 80030fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80030fe:	89a3      	ldrhlt	r3, [r4, #12]
 8003100:	181b      	addge	r3, r3, r0
 8003102:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003106:	bfac      	ite	ge
 8003108:	6563      	strge	r3, [r4, #84]	; 0x54
 800310a:	81a3      	strhlt	r3, [r4, #12]
 800310c:	bd10      	pop	{r4, pc}

0800310e <__swrite>:
 800310e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003112:	461f      	mov	r7, r3
 8003114:	898b      	ldrh	r3, [r1, #12]
 8003116:	05db      	lsls	r3, r3, #23
 8003118:	4605      	mov	r5, r0
 800311a:	460c      	mov	r4, r1
 800311c:	4616      	mov	r6, r2
 800311e:	d505      	bpl.n	800312c <__swrite+0x1e>
 8003120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003124:	2302      	movs	r3, #2
 8003126:	2200      	movs	r2, #0
 8003128:	f000 f83c 	bl	80031a4 <_lseek_r>
 800312c:	89a3      	ldrh	r3, [r4, #12]
 800312e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003132:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003136:	81a3      	strh	r3, [r4, #12]
 8003138:	4632      	mov	r2, r6
 800313a:	463b      	mov	r3, r7
 800313c:	4628      	mov	r0, r5
 800313e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003142:	f000 b853 	b.w	80031ec <_write_r>

08003146 <__sseek>:
 8003146:	b510      	push	{r4, lr}
 8003148:	460c      	mov	r4, r1
 800314a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800314e:	f000 f829 	bl	80031a4 <_lseek_r>
 8003152:	1c43      	adds	r3, r0, #1
 8003154:	89a3      	ldrh	r3, [r4, #12]
 8003156:	bf15      	itete	ne
 8003158:	6560      	strne	r0, [r4, #84]	; 0x54
 800315a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800315e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003162:	81a3      	strheq	r3, [r4, #12]
 8003164:	bf18      	it	ne
 8003166:	81a3      	strhne	r3, [r4, #12]
 8003168:	bd10      	pop	{r4, pc}

0800316a <__sclose>:
 800316a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800316e:	f000 b809 	b.w	8003184 <_close_r>

08003172 <memset>:
 8003172:	4402      	add	r2, r0
 8003174:	4603      	mov	r3, r0
 8003176:	4293      	cmp	r3, r2
 8003178:	d100      	bne.n	800317c <memset+0xa>
 800317a:	4770      	bx	lr
 800317c:	f803 1b01 	strb.w	r1, [r3], #1
 8003180:	e7f9      	b.n	8003176 <memset+0x4>
	...

08003184 <_close_r>:
 8003184:	b538      	push	{r3, r4, r5, lr}
 8003186:	4d06      	ldr	r5, [pc, #24]	; (80031a0 <_close_r+0x1c>)
 8003188:	2300      	movs	r3, #0
 800318a:	4604      	mov	r4, r0
 800318c:	4608      	mov	r0, r1
 800318e:	602b      	str	r3, [r5, #0]
 8003190:	f7fd fd05 	bl	8000b9e <_close>
 8003194:	1c43      	adds	r3, r0, #1
 8003196:	d102      	bne.n	800319e <_close_r+0x1a>
 8003198:	682b      	ldr	r3, [r5, #0]
 800319a:	b103      	cbz	r3, 800319e <_close_r+0x1a>
 800319c:	6023      	str	r3, [r4, #0]
 800319e:	bd38      	pop	{r3, r4, r5, pc}
 80031a0:	20000364 	.word	0x20000364

080031a4 <_lseek_r>:
 80031a4:	b538      	push	{r3, r4, r5, lr}
 80031a6:	4d07      	ldr	r5, [pc, #28]	; (80031c4 <_lseek_r+0x20>)
 80031a8:	4604      	mov	r4, r0
 80031aa:	4608      	mov	r0, r1
 80031ac:	4611      	mov	r1, r2
 80031ae:	2200      	movs	r2, #0
 80031b0:	602a      	str	r2, [r5, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	f7fd fd1a 	bl	8000bec <_lseek>
 80031b8:	1c43      	adds	r3, r0, #1
 80031ba:	d102      	bne.n	80031c2 <_lseek_r+0x1e>
 80031bc:	682b      	ldr	r3, [r5, #0]
 80031be:	b103      	cbz	r3, 80031c2 <_lseek_r+0x1e>
 80031c0:	6023      	str	r3, [r4, #0]
 80031c2:	bd38      	pop	{r3, r4, r5, pc}
 80031c4:	20000364 	.word	0x20000364

080031c8 <_read_r>:
 80031c8:	b538      	push	{r3, r4, r5, lr}
 80031ca:	4d07      	ldr	r5, [pc, #28]	; (80031e8 <_read_r+0x20>)
 80031cc:	4604      	mov	r4, r0
 80031ce:	4608      	mov	r0, r1
 80031d0:	4611      	mov	r1, r2
 80031d2:	2200      	movs	r2, #0
 80031d4:	602a      	str	r2, [r5, #0]
 80031d6:	461a      	mov	r2, r3
 80031d8:	f7fd fcc4 	bl	8000b64 <_read>
 80031dc:	1c43      	adds	r3, r0, #1
 80031de:	d102      	bne.n	80031e6 <_read_r+0x1e>
 80031e0:	682b      	ldr	r3, [r5, #0]
 80031e2:	b103      	cbz	r3, 80031e6 <_read_r+0x1e>
 80031e4:	6023      	str	r3, [r4, #0]
 80031e6:	bd38      	pop	{r3, r4, r5, pc}
 80031e8:	20000364 	.word	0x20000364

080031ec <_write_r>:
 80031ec:	b538      	push	{r3, r4, r5, lr}
 80031ee:	4d07      	ldr	r5, [pc, #28]	; (800320c <_write_r+0x20>)
 80031f0:	4604      	mov	r4, r0
 80031f2:	4608      	mov	r0, r1
 80031f4:	4611      	mov	r1, r2
 80031f6:	2200      	movs	r2, #0
 80031f8:	602a      	str	r2, [r5, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	f7fd fa00 	bl	8000600 <_write>
 8003200:	1c43      	adds	r3, r0, #1
 8003202:	d102      	bne.n	800320a <_write_r+0x1e>
 8003204:	682b      	ldr	r3, [r5, #0]
 8003206:	b103      	cbz	r3, 800320a <_write_r+0x1e>
 8003208:	6023      	str	r3, [r4, #0]
 800320a:	bd38      	pop	{r3, r4, r5, pc}
 800320c:	20000364 	.word	0x20000364

08003210 <__errno>:
 8003210:	4b01      	ldr	r3, [pc, #4]	; (8003218 <__errno+0x8>)
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	20000064 	.word	0x20000064

0800321c <__libc_init_array>:
 800321c:	b570      	push	{r4, r5, r6, lr}
 800321e:	4d0d      	ldr	r5, [pc, #52]	; (8003254 <__libc_init_array+0x38>)
 8003220:	4c0d      	ldr	r4, [pc, #52]	; (8003258 <__libc_init_array+0x3c>)
 8003222:	1b64      	subs	r4, r4, r5
 8003224:	10a4      	asrs	r4, r4, #2
 8003226:	2600      	movs	r6, #0
 8003228:	42a6      	cmp	r6, r4
 800322a:	d109      	bne.n	8003240 <__libc_init_array+0x24>
 800322c:	4d0b      	ldr	r5, [pc, #44]	; (800325c <__libc_init_array+0x40>)
 800322e:	4c0c      	ldr	r4, [pc, #48]	; (8003260 <__libc_init_array+0x44>)
 8003230:	f000 fdc0 	bl	8003db4 <_init>
 8003234:	1b64      	subs	r4, r4, r5
 8003236:	10a4      	asrs	r4, r4, #2
 8003238:	2600      	movs	r6, #0
 800323a:	42a6      	cmp	r6, r4
 800323c:	d105      	bne.n	800324a <__libc_init_array+0x2e>
 800323e:	bd70      	pop	{r4, r5, r6, pc}
 8003240:	f855 3b04 	ldr.w	r3, [r5], #4
 8003244:	4798      	blx	r3
 8003246:	3601      	adds	r6, #1
 8003248:	e7ee      	b.n	8003228 <__libc_init_array+0xc>
 800324a:	f855 3b04 	ldr.w	r3, [r5], #4
 800324e:	4798      	blx	r3
 8003250:	3601      	adds	r6, #1
 8003252:	e7f2      	b.n	800323a <__libc_init_array+0x1e>
 8003254:	08003e24 	.word	0x08003e24
 8003258:	08003e24 	.word	0x08003e24
 800325c:	08003e24 	.word	0x08003e24
 8003260:	08003e28 	.word	0x08003e28

08003264 <__retarget_lock_init_recursive>:
 8003264:	4770      	bx	lr

08003266 <__retarget_lock_acquire_recursive>:
 8003266:	4770      	bx	lr

08003268 <__retarget_lock_release_recursive>:
 8003268:	4770      	bx	lr
	...

0800326c <_free_r>:
 800326c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800326e:	2900      	cmp	r1, #0
 8003270:	d044      	beq.n	80032fc <_free_r+0x90>
 8003272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003276:	9001      	str	r0, [sp, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	f1a1 0404 	sub.w	r4, r1, #4
 800327e:	bfb8      	it	lt
 8003280:	18e4      	addlt	r4, r4, r3
 8003282:	f000 f8df 	bl	8003444 <__malloc_lock>
 8003286:	4a1e      	ldr	r2, [pc, #120]	; (8003300 <_free_r+0x94>)
 8003288:	9801      	ldr	r0, [sp, #4]
 800328a:	6813      	ldr	r3, [r2, #0]
 800328c:	b933      	cbnz	r3, 800329c <_free_r+0x30>
 800328e:	6063      	str	r3, [r4, #4]
 8003290:	6014      	str	r4, [r2, #0]
 8003292:	b003      	add	sp, #12
 8003294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003298:	f000 b8da 	b.w	8003450 <__malloc_unlock>
 800329c:	42a3      	cmp	r3, r4
 800329e:	d908      	bls.n	80032b2 <_free_r+0x46>
 80032a0:	6825      	ldr	r5, [r4, #0]
 80032a2:	1961      	adds	r1, r4, r5
 80032a4:	428b      	cmp	r3, r1
 80032a6:	bf01      	itttt	eq
 80032a8:	6819      	ldreq	r1, [r3, #0]
 80032aa:	685b      	ldreq	r3, [r3, #4]
 80032ac:	1949      	addeq	r1, r1, r5
 80032ae:	6021      	streq	r1, [r4, #0]
 80032b0:	e7ed      	b.n	800328e <_free_r+0x22>
 80032b2:	461a      	mov	r2, r3
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	b10b      	cbz	r3, 80032bc <_free_r+0x50>
 80032b8:	42a3      	cmp	r3, r4
 80032ba:	d9fa      	bls.n	80032b2 <_free_r+0x46>
 80032bc:	6811      	ldr	r1, [r2, #0]
 80032be:	1855      	adds	r5, r2, r1
 80032c0:	42a5      	cmp	r5, r4
 80032c2:	d10b      	bne.n	80032dc <_free_r+0x70>
 80032c4:	6824      	ldr	r4, [r4, #0]
 80032c6:	4421      	add	r1, r4
 80032c8:	1854      	adds	r4, r2, r1
 80032ca:	42a3      	cmp	r3, r4
 80032cc:	6011      	str	r1, [r2, #0]
 80032ce:	d1e0      	bne.n	8003292 <_free_r+0x26>
 80032d0:	681c      	ldr	r4, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	6053      	str	r3, [r2, #4]
 80032d6:	440c      	add	r4, r1
 80032d8:	6014      	str	r4, [r2, #0]
 80032da:	e7da      	b.n	8003292 <_free_r+0x26>
 80032dc:	d902      	bls.n	80032e4 <_free_r+0x78>
 80032de:	230c      	movs	r3, #12
 80032e0:	6003      	str	r3, [r0, #0]
 80032e2:	e7d6      	b.n	8003292 <_free_r+0x26>
 80032e4:	6825      	ldr	r5, [r4, #0]
 80032e6:	1961      	adds	r1, r4, r5
 80032e8:	428b      	cmp	r3, r1
 80032ea:	bf04      	itt	eq
 80032ec:	6819      	ldreq	r1, [r3, #0]
 80032ee:	685b      	ldreq	r3, [r3, #4]
 80032f0:	6063      	str	r3, [r4, #4]
 80032f2:	bf04      	itt	eq
 80032f4:	1949      	addeq	r1, r1, r5
 80032f6:	6021      	streq	r1, [r4, #0]
 80032f8:	6054      	str	r4, [r2, #4]
 80032fa:	e7ca      	b.n	8003292 <_free_r+0x26>
 80032fc:	b003      	add	sp, #12
 80032fe:	bd30      	pop	{r4, r5, pc}
 8003300:	2000036c 	.word	0x2000036c

08003304 <sbrk_aligned>:
 8003304:	b570      	push	{r4, r5, r6, lr}
 8003306:	4e0e      	ldr	r6, [pc, #56]	; (8003340 <sbrk_aligned+0x3c>)
 8003308:	460c      	mov	r4, r1
 800330a:	6831      	ldr	r1, [r6, #0]
 800330c:	4605      	mov	r5, r0
 800330e:	b911      	cbnz	r1, 8003316 <sbrk_aligned+0x12>
 8003310:	f000 fcbc 	bl	8003c8c <_sbrk_r>
 8003314:	6030      	str	r0, [r6, #0]
 8003316:	4621      	mov	r1, r4
 8003318:	4628      	mov	r0, r5
 800331a:	f000 fcb7 	bl	8003c8c <_sbrk_r>
 800331e:	1c43      	adds	r3, r0, #1
 8003320:	d00a      	beq.n	8003338 <sbrk_aligned+0x34>
 8003322:	1cc4      	adds	r4, r0, #3
 8003324:	f024 0403 	bic.w	r4, r4, #3
 8003328:	42a0      	cmp	r0, r4
 800332a:	d007      	beq.n	800333c <sbrk_aligned+0x38>
 800332c:	1a21      	subs	r1, r4, r0
 800332e:	4628      	mov	r0, r5
 8003330:	f000 fcac 	bl	8003c8c <_sbrk_r>
 8003334:	3001      	adds	r0, #1
 8003336:	d101      	bne.n	800333c <sbrk_aligned+0x38>
 8003338:	f04f 34ff 	mov.w	r4, #4294967295
 800333c:	4620      	mov	r0, r4
 800333e:	bd70      	pop	{r4, r5, r6, pc}
 8003340:	20000370 	.word	0x20000370

08003344 <_malloc_r>:
 8003344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003348:	1ccd      	adds	r5, r1, #3
 800334a:	f025 0503 	bic.w	r5, r5, #3
 800334e:	3508      	adds	r5, #8
 8003350:	2d0c      	cmp	r5, #12
 8003352:	bf38      	it	cc
 8003354:	250c      	movcc	r5, #12
 8003356:	2d00      	cmp	r5, #0
 8003358:	4607      	mov	r7, r0
 800335a:	db01      	blt.n	8003360 <_malloc_r+0x1c>
 800335c:	42a9      	cmp	r1, r5
 800335e:	d905      	bls.n	800336c <_malloc_r+0x28>
 8003360:	230c      	movs	r3, #12
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	2600      	movs	r6, #0
 8003366:	4630      	mov	r0, r6
 8003368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800336c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003440 <_malloc_r+0xfc>
 8003370:	f000 f868 	bl	8003444 <__malloc_lock>
 8003374:	f8d8 3000 	ldr.w	r3, [r8]
 8003378:	461c      	mov	r4, r3
 800337a:	bb5c      	cbnz	r4, 80033d4 <_malloc_r+0x90>
 800337c:	4629      	mov	r1, r5
 800337e:	4638      	mov	r0, r7
 8003380:	f7ff ffc0 	bl	8003304 <sbrk_aligned>
 8003384:	1c43      	adds	r3, r0, #1
 8003386:	4604      	mov	r4, r0
 8003388:	d155      	bne.n	8003436 <_malloc_r+0xf2>
 800338a:	f8d8 4000 	ldr.w	r4, [r8]
 800338e:	4626      	mov	r6, r4
 8003390:	2e00      	cmp	r6, #0
 8003392:	d145      	bne.n	8003420 <_malloc_r+0xdc>
 8003394:	2c00      	cmp	r4, #0
 8003396:	d048      	beq.n	800342a <_malloc_r+0xe6>
 8003398:	6823      	ldr	r3, [r4, #0]
 800339a:	4631      	mov	r1, r6
 800339c:	4638      	mov	r0, r7
 800339e:	eb04 0903 	add.w	r9, r4, r3
 80033a2:	f000 fc73 	bl	8003c8c <_sbrk_r>
 80033a6:	4581      	cmp	r9, r0
 80033a8:	d13f      	bne.n	800342a <_malloc_r+0xe6>
 80033aa:	6821      	ldr	r1, [r4, #0]
 80033ac:	1a6d      	subs	r5, r5, r1
 80033ae:	4629      	mov	r1, r5
 80033b0:	4638      	mov	r0, r7
 80033b2:	f7ff ffa7 	bl	8003304 <sbrk_aligned>
 80033b6:	3001      	adds	r0, #1
 80033b8:	d037      	beq.n	800342a <_malloc_r+0xe6>
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	442b      	add	r3, r5
 80033be:	6023      	str	r3, [r4, #0]
 80033c0:	f8d8 3000 	ldr.w	r3, [r8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d038      	beq.n	800343a <_malloc_r+0xf6>
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	42a2      	cmp	r2, r4
 80033cc:	d12b      	bne.n	8003426 <_malloc_r+0xe2>
 80033ce:	2200      	movs	r2, #0
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	e00f      	b.n	80033f4 <_malloc_r+0xb0>
 80033d4:	6822      	ldr	r2, [r4, #0]
 80033d6:	1b52      	subs	r2, r2, r5
 80033d8:	d41f      	bmi.n	800341a <_malloc_r+0xd6>
 80033da:	2a0b      	cmp	r2, #11
 80033dc:	d917      	bls.n	800340e <_malloc_r+0xca>
 80033de:	1961      	adds	r1, r4, r5
 80033e0:	42a3      	cmp	r3, r4
 80033e2:	6025      	str	r5, [r4, #0]
 80033e4:	bf18      	it	ne
 80033e6:	6059      	strne	r1, [r3, #4]
 80033e8:	6863      	ldr	r3, [r4, #4]
 80033ea:	bf08      	it	eq
 80033ec:	f8c8 1000 	streq.w	r1, [r8]
 80033f0:	5162      	str	r2, [r4, r5]
 80033f2:	604b      	str	r3, [r1, #4]
 80033f4:	4638      	mov	r0, r7
 80033f6:	f104 060b 	add.w	r6, r4, #11
 80033fa:	f000 f829 	bl	8003450 <__malloc_unlock>
 80033fe:	f026 0607 	bic.w	r6, r6, #7
 8003402:	1d23      	adds	r3, r4, #4
 8003404:	1af2      	subs	r2, r6, r3
 8003406:	d0ae      	beq.n	8003366 <_malloc_r+0x22>
 8003408:	1b9b      	subs	r3, r3, r6
 800340a:	50a3      	str	r3, [r4, r2]
 800340c:	e7ab      	b.n	8003366 <_malloc_r+0x22>
 800340e:	42a3      	cmp	r3, r4
 8003410:	6862      	ldr	r2, [r4, #4]
 8003412:	d1dd      	bne.n	80033d0 <_malloc_r+0x8c>
 8003414:	f8c8 2000 	str.w	r2, [r8]
 8003418:	e7ec      	b.n	80033f4 <_malloc_r+0xb0>
 800341a:	4623      	mov	r3, r4
 800341c:	6864      	ldr	r4, [r4, #4]
 800341e:	e7ac      	b.n	800337a <_malloc_r+0x36>
 8003420:	4634      	mov	r4, r6
 8003422:	6876      	ldr	r6, [r6, #4]
 8003424:	e7b4      	b.n	8003390 <_malloc_r+0x4c>
 8003426:	4613      	mov	r3, r2
 8003428:	e7cc      	b.n	80033c4 <_malloc_r+0x80>
 800342a:	230c      	movs	r3, #12
 800342c:	603b      	str	r3, [r7, #0]
 800342e:	4638      	mov	r0, r7
 8003430:	f000 f80e 	bl	8003450 <__malloc_unlock>
 8003434:	e797      	b.n	8003366 <_malloc_r+0x22>
 8003436:	6025      	str	r5, [r4, #0]
 8003438:	e7dc      	b.n	80033f4 <_malloc_r+0xb0>
 800343a:	605b      	str	r3, [r3, #4]
 800343c:	deff      	udf	#255	; 0xff
 800343e:	bf00      	nop
 8003440:	2000036c 	.word	0x2000036c

08003444 <__malloc_lock>:
 8003444:	4801      	ldr	r0, [pc, #4]	; (800344c <__malloc_lock+0x8>)
 8003446:	f7ff bf0e 	b.w	8003266 <__retarget_lock_acquire_recursive>
 800344a:	bf00      	nop
 800344c:	20000368 	.word	0x20000368

08003450 <__malloc_unlock>:
 8003450:	4801      	ldr	r0, [pc, #4]	; (8003458 <__malloc_unlock+0x8>)
 8003452:	f7ff bf09 	b.w	8003268 <__retarget_lock_release_recursive>
 8003456:	bf00      	nop
 8003458:	20000368 	.word	0x20000368

0800345c <__sfputc_r>:
 800345c:	6893      	ldr	r3, [r2, #8]
 800345e:	3b01      	subs	r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	b410      	push	{r4}
 8003464:	6093      	str	r3, [r2, #8]
 8003466:	da08      	bge.n	800347a <__sfputc_r+0x1e>
 8003468:	6994      	ldr	r4, [r2, #24]
 800346a:	42a3      	cmp	r3, r4
 800346c:	db01      	blt.n	8003472 <__sfputc_r+0x16>
 800346e:	290a      	cmp	r1, #10
 8003470:	d103      	bne.n	800347a <__sfputc_r+0x1e>
 8003472:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003476:	f000 bb73 	b.w	8003b60 <__swbuf_r>
 800347a:	6813      	ldr	r3, [r2, #0]
 800347c:	1c58      	adds	r0, r3, #1
 800347e:	6010      	str	r0, [r2, #0]
 8003480:	7019      	strb	r1, [r3, #0]
 8003482:	4608      	mov	r0, r1
 8003484:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003488:	4770      	bx	lr

0800348a <__sfputs_r>:
 800348a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348c:	4606      	mov	r6, r0
 800348e:	460f      	mov	r7, r1
 8003490:	4614      	mov	r4, r2
 8003492:	18d5      	adds	r5, r2, r3
 8003494:	42ac      	cmp	r4, r5
 8003496:	d101      	bne.n	800349c <__sfputs_r+0x12>
 8003498:	2000      	movs	r0, #0
 800349a:	e007      	b.n	80034ac <__sfputs_r+0x22>
 800349c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034a0:	463a      	mov	r2, r7
 80034a2:	4630      	mov	r0, r6
 80034a4:	f7ff ffda 	bl	800345c <__sfputc_r>
 80034a8:	1c43      	adds	r3, r0, #1
 80034aa:	d1f3      	bne.n	8003494 <__sfputs_r+0xa>
 80034ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080034b0 <_vfiprintf_r>:
 80034b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034b4:	460d      	mov	r5, r1
 80034b6:	b09d      	sub	sp, #116	; 0x74
 80034b8:	4614      	mov	r4, r2
 80034ba:	4698      	mov	r8, r3
 80034bc:	4606      	mov	r6, r0
 80034be:	b118      	cbz	r0, 80034c8 <_vfiprintf_r+0x18>
 80034c0:	6a03      	ldr	r3, [r0, #32]
 80034c2:	b90b      	cbnz	r3, 80034c8 <_vfiprintf_r+0x18>
 80034c4:	f7ff fdca 	bl	800305c <__sinit>
 80034c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80034ca:	07d9      	lsls	r1, r3, #31
 80034cc:	d405      	bmi.n	80034da <_vfiprintf_r+0x2a>
 80034ce:	89ab      	ldrh	r3, [r5, #12]
 80034d0:	059a      	lsls	r2, r3, #22
 80034d2:	d402      	bmi.n	80034da <_vfiprintf_r+0x2a>
 80034d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80034d6:	f7ff fec6 	bl	8003266 <__retarget_lock_acquire_recursive>
 80034da:	89ab      	ldrh	r3, [r5, #12]
 80034dc:	071b      	lsls	r3, r3, #28
 80034de:	d501      	bpl.n	80034e4 <_vfiprintf_r+0x34>
 80034e0:	692b      	ldr	r3, [r5, #16]
 80034e2:	b99b      	cbnz	r3, 800350c <_vfiprintf_r+0x5c>
 80034e4:	4629      	mov	r1, r5
 80034e6:	4630      	mov	r0, r6
 80034e8:	f000 fb78 	bl	8003bdc <__swsetup_r>
 80034ec:	b170      	cbz	r0, 800350c <_vfiprintf_r+0x5c>
 80034ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80034f0:	07dc      	lsls	r4, r3, #31
 80034f2:	d504      	bpl.n	80034fe <_vfiprintf_r+0x4e>
 80034f4:	f04f 30ff 	mov.w	r0, #4294967295
 80034f8:	b01d      	add	sp, #116	; 0x74
 80034fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034fe:	89ab      	ldrh	r3, [r5, #12]
 8003500:	0598      	lsls	r0, r3, #22
 8003502:	d4f7      	bmi.n	80034f4 <_vfiprintf_r+0x44>
 8003504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003506:	f7ff feaf 	bl	8003268 <__retarget_lock_release_recursive>
 800350a:	e7f3      	b.n	80034f4 <_vfiprintf_r+0x44>
 800350c:	2300      	movs	r3, #0
 800350e:	9309      	str	r3, [sp, #36]	; 0x24
 8003510:	2320      	movs	r3, #32
 8003512:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003516:	f8cd 800c 	str.w	r8, [sp, #12]
 800351a:	2330      	movs	r3, #48	; 0x30
 800351c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80036d0 <_vfiprintf_r+0x220>
 8003520:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003524:	f04f 0901 	mov.w	r9, #1
 8003528:	4623      	mov	r3, r4
 800352a:	469a      	mov	sl, r3
 800352c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003530:	b10a      	cbz	r2, 8003536 <_vfiprintf_r+0x86>
 8003532:	2a25      	cmp	r2, #37	; 0x25
 8003534:	d1f9      	bne.n	800352a <_vfiprintf_r+0x7a>
 8003536:	ebba 0b04 	subs.w	fp, sl, r4
 800353a:	d00b      	beq.n	8003554 <_vfiprintf_r+0xa4>
 800353c:	465b      	mov	r3, fp
 800353e:	4622      	mov	r2, r4
 8003540:	4629      	mov	r1, r5
 8003542:	4630      	mov	r0, r6
 8003544:	f7ff ffa1 	bl	800348a <__sfputs_r>
 8003548:	3001      	adds	r0, #1
 800354a:	f000 80a9 	beq.w	80036a0 <_vfiprintf_r+0x1f0>
 800354e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003550:	445a      	add	r2, fp
 8003552:	9209      	str	r2, [sp, #36]	; 0x24
 8003554:	f89a 3000 	ldrb.w	r3, [sl]
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 80a1 	beq.w	80036a0 <_vfiprintf_r+0x1f0>
 800355e:	2300      	movs	r3, #0
 8003560:	f04f 32ff 	mov.w	r2, #4294967295
 8003564:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003568:	f10a 0a01 	add.w	sl, sl, #1
 800356c:	9304      	str	r3, [sp, #16]
 800356e:	9307      	str	r3, [sp, #28]
 8003570:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003574:	931a      	str	r3, [sp, #104]	; 0x68
 8003576:	4654      	mov	r4, sl
 8003578:	2205      	movs	r2, #5
 800357a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800357e:	4854      	ldr	r0, [pc, #336]	; (80036d0 <_vfiprintf_r+0x220>)
 8003580:	f7fc fe2e 	bl	80001e0 <memchr>
 8003584:	9a04      	ldr	r2, [sp, #16]
 8003586:	b9d8      	cbnz	r0, 80035c0 <_vfiprintf_r+0x110>
 8003588:	06d1      	lsls	r1, r2, #27
 800358a:	bf44      	itt	mi
 800358c:	2320      	movmi	r3, #32
 800358e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003592:	0713      	lsls	r3, r2, #28
 8003594:	bf44      	itt	mi
 8003596:	232b      	movmi	r3, #43	; 0x2b
 8003598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800359c:	f89a 3000 	ldrb.w	r3, [sl]
 80035a0:	2b2a      	cmp	r3, #42	; 0x2a
 80035a2:	d015      	beq.n	80035d0 <_vfiprintf_r+0x120>
 80035a4:	9a07      	ldr	r2, [sp, #28]
 80035a6:	4654      	mov	r4, sl
 80035a8:	2000      	movs	r0, #0
 80035aa:	f04f 0c0a 	mov.w	ip, #10
 80035ae:	4621      	mov	r1, r4
 80035b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035b4:	3b30      	subs	r3, #48	; 0x30
 80035b6:	2b09      	cmp	r3, #9
 80035b8:	d94d      	bls.n	8003656 <_vfiprintf_r+0x1a6>
 80035ba:	b1b0      	cbz	r0, 80035ea <_vfiprintf_r+0x13a>
 80035bc:	9207      	str	r2, [sp, #28]
 80035be:	e014      	b.n	80035ea <_vfiprintf_r+0x13a>
 80035c0:	eba0 0308 	sub.w	r3, r0, r8
 80035c4:	fa09 f303 	lsl.w	r3, r9, r3
 80035c8:	4313      	orrs	r3, r2
 80035ca:	9304      	str	r3, [sp, #16]
 80035cc:	46a2      	mov	sl, r4
 80035ce:	e7d2      	b.n	8003576 <_vfiprintf_r+0xc6>
 80035d0:	9b03      	ldr	r3, [sp, #12]
 80035d2:	1d19      	adds	r1, r3, #4
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	9103      	str	r1, [sp, #12]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	bfbb      	ittet	lt
 80035dc:	425b      	neglt	r3, r3
 80035de:	f042 0202 	orrlt.w	r2, r2, #2
 80035e2:	9307      	strge	r3, [sp, #28]
 80035e4:	9307      	strlt	r3, [sp, #28]
 80035e6:	bfb8      	it	lt
 80035e8:	9204      	strlt	r2, [sp, #16]
 80035ea:	7823      	ldrb	r3, [r4, #0]
 80035ec:	2b2e      	cmp	r3, #46	; 0x2e
 80035ee:	d10c      	bne.n	800360a <_vfiprintf_r+0x15a>
 80035f0:	7863      	ldrb	r3, [r4, #1]
 80035f2:	2b2a      	cmp	r3, #42	; 0x2a
 80035f4:	d134      	bne.n	8003660 <_vfiprintf_r+0x1b0>
 80035f6:	9b03      	ldr	r3, [sp, #12]
 80035f8:	1d1a      	adds	r2, r3, #4
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	9203      	str	r2, [sp, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	bfb8      	it	lt
 8003602:	f04f 33ff 	movlt.w	r3, #4294967295
 8003606:	3402      	adds	r4, #2
 8003608:	9305      	str	r3, [sp, #20]
 800360a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80036e0 <_vfiprintf_r+0x230>
 800360e:	7821      	ldrb	r1, [r4, #0]
 8003610:	2203      	movs	r2, #3
 8003612:	4650      	mov	r0, sl
 8003614:	f7fc fde4 	bl	80001e0 <memchr>
 8003618:	b138      	cbz	r0, 800362a <_vfiprintf_r+0x17a>
 800361a:	9b04      	ldr	r3, [sp, #16]
 800361c:	eba0 000a 	sub.w	r0, r0, sl
 8003620:	2240      	movs	r2, #64	; 0x40
 8003622:	4082      	lsls	r2, r0
 8003624:	4313      	orrs	r3, r2
 8003626:	3401      	adds	r4, #1
 8003628:	9304      	str	r3, [sp, #16]
 800362a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800362e:	4829      	ldr	r0, [pc, #164]	; (80036d4 <_vfiprintf_r+0x224>)
 8003630:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003634:	2206      	movs	r2, #6
 8003636:	f7fc fdd3 	bl	80001e0 <memchr>
 800363a:	2800      	cmp	r0, #0
 800363c:	d03f      	beq.n	80036be <_vfiprintf_r+0x20e>
 800363e:	4b26      	ldr	r3, [pc, #152]	; (80036d8 <_vfiprintf_r+0x228>)
 8003640:	bb1b      	cbnz	r3, 800368a <_vfiprintf_r+0x1da>
 8003642:	9b03      	ldr	r3, [sp, #12]
 8003644:	3307      	adds	r3, #7
 8003646:	f023 0307 	bic.w	r3, r3, #7
 800364a:	3308      	adds	r3, #8
 800364c:	9303      	str	r3, [sp, #12]
 800364e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003650:	443b      	add	r3, r7
 8003652:	9309      	str	r3, [sp, #36]	; 0x24
 8003654:	e768      	b.n	8003528 <_vfiprintf_r+0x78>
 8003656:	fb0c 3202 	mla	r2, ip, r2, r3
 800365a:	460c      	mov	r4, r1
 800365c:	2001      	movs	r0, #1
 800365e:	e7a6      	b.n	80035ae <_vfiprintf_r+0xfe>
 8003660:	2300      	movs	r3, #0
 8003662:	3401      	adds	r4, #1
 8003664:	9305      	str	r3, [sp, #20]
 8003666:	4619      	mov	r1, r3
 8003668:	f04f 0c0a 	mov.w	ip, #10
 800366c:	4620      	mov	r0, r4
 800366e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003672:	3a30      	subs	r2, #48	; 0x30
 8003674:	2a09      	cmp	r2, #9
 8003676:	d903      	bls.n	8003680 <_vfiprintf_r+0x1d0>
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0c6      	beq.n	800360a <_vfiprintf_r+0x15a>
 800367c:	9105      	str	r1, [sp, #20]
 800367e:	e7c4      	b.n	800360a <_vfiprintf_r+0x15a>
 8003680:	fb0c 2101 	mla	r1, ip, r1, r2
 8003684:	4604      	mov	r4, r0
 8003686:	2301      	movs	r3, #1
 8003688:	e7f0      	b.n	800366c <_vfiprintf_r+0x1bc>
 800368a:	ab03      	add	r3, sp, #12
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	462a      	mov	r2, r5
 8003690:	4b12      	ldr	r3, [pc, #72]	; (80036dc <_vfiprintf_r+0x22c>)
 8003692:	a904      	add	r1, sp, #16
 8003694:	4630      	mov	r0, r6
 8003696:	f3af 8000 	nop.w
 800369a:	4607      	mov	r7, r0
 800369c:	1c78      	adds	r0, r7, #1
 800369e:	d1d6      	bne.n	800364e <_vfiprintf_r+0x19e>
 80036a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036a2:	07d9      	lsls	r1, r3, #31
 80036a4:	d405      	bmi.n	80036b2 <_vfiprintf_r+0x202>
 80036a6:	89ab      	ldrh	r3, [r5, #12]
 80036a8:	059a      	lsls	r2, r3, #22
 80036aa:	d402      	bmi.n	80036b2 <_vfiprintf_r+0x202>
 80036ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036ae:	f7ff fddb 	bl	8003268 <__retarget_lock_release_recursive>
 80036b2:	89ab      	ldrh	r3, [r5, #12]
 80036b4:	065b      	lsls	r3, r3, #25
 80036b6:	f53f af1d 	bmi.w	80034f4 <_vfiprintf_r+0x44>
 80036ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036bc:	e71c      	b.n	80034f8 <_vfiprintf_r+0x48>
 80036be:	ab03      	add	r3, sp, #12
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	462a      	mov	r2, r5
 80036c4:	4b05      	ldr	r3, [pc, #20]	; (80036dc <_vfiprintf_r+0x22c>)
 80036c6:	a904      	add	r1, sp, #16
 80036c8:	4630      	mov	r0, r6
 80036ca:	f000 f879 	bl	80037c0 <_printf_i>
 80036ce:	e7e4      	b.n	800369a <_vfiprintf_r+0x1ea>
 80036d0:	08003de8 	.word	0x08003de8
 80036d4:	08003df2 	.word	0x08003df2
 80036d8:	00000000 	.word	0x00000000
 80036dc:	0800348b 	.word	0x0800348b
 80036e0:	08003dee 	.word	0x08003dee

080036e4 <_printf_common>:
 80036e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036e8:	4616      	mov	r6, r2
 80036ea:	4699      	mov	r9, r3
 80036ec:	688a      	ldr	r2, [r1, #8]
 80036ee:	690b      	ldr	r3, [r1, #16]
 80036f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036f4:	4293      	cmp	r3, r2
 80036f6:	bfb8      	it	lt
 80036f8:	4613      	movlt	r3, r2
 80036fa:	6033      	str	r3, [r6, #0]
 80036fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003700:	4607      	mov	r7, r0
 8003702:	460c      	mov	r4, r1
 8003704:	b10a      	cbz	r2, 800370a <_printf_common+0x26>
 8003706:	3301      	adds	r3, #1
 8003708:	6033      	str	r3, [r6, #0]
 800370a:	6823      	ldr	r3, [r4, #0]
 800370c:	0699      	lsls	r1, r3, #26
 800370e:	bf42      	ittt	mi
 8003710:	6833      	ldrmi	r3, [r6, #0]
 8003712:	3302      	addmi	r3, #2
 8003714:	6033      	strmi	r3, [r6, #0]
 8003716:	6825      	ldr	r5, [r4, #0]
 8003718:	f015 0506 	ands.w	r5, r5, #6
 800371c:	d106      	bne.n	800372c <_printf_common+0x48>
 800371e:	f104 0a19 	add.w	sl, r4, #25
 8003722:	68e3      	ldr	r3, [r4, #12]
 8003724:	6832      	ldr	r2, [r6, #0]
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	42ab      	cmp	r3, r5
 800372a:	dc26      	bgt.n	800377a <_printf_common+0x96>
 800372c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003730:	1e13      	subs	r3, r2, #0
 8003732:	6822      	ldr	r2, [r4, #0]
 8003734:	bf18      	it	ne
 8003736:	2301      	movne	r3, #1
 8003738:	0692      	lsls	r2, r2, #26
 800373a:	d42b      	bmi.n	8003794 <_printf_common+0xb0>
 800373c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003740:	4649      	mov	r1, r9
 8003742:	4638      	mov	r0, r7
 8003744:	47c0      	blx	r8
 8003746:	3001      	adds	r0, #1
 8003748:	d01e      	beq.n	8003788 <_printf_common+0xa4>
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	6922      	ldr	r2, [r4, #16]
 800374e:	f003 0306 	and.w	r3, r3, #6
 8003752:	2b04      	cmp	r3, #4
 8003754:	bf02      	ittt	eq
 8003756:	68e5      	ldreq	r5, [r4, #12]
 8003758:	6833      	ldreq	r3, [r6, #0]
 800375a:	1aed      	subeq	r5, r5, r3
 800375c:	68a3      	ldr	r3, [r4, #8]
 800375e:	bf0c      	ite	eq
 8003760:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003764:	2500      	movne	r5, #0
 8003766:	4293      	cmp	r3, r2
 8003768:	bfc4      	itt	gt
 800376a:	1a9b      	subgt	r3, r3, r2
 800376c:	18ed      	addgt	r5, r5, r3
 800376e:	2600      	movs	r6, #0
 8003770:	341a      	adds	r4, #26
 8003772:	42b5      	cmp	r5, r6
 8003774:	d11a      	bne.n	80037ac <_printf_common+0xc8>
 8003776:	2000      	movs	r0, #0
 8003778:	e008      	b.n	800378c <_printf_common+0xa8>
 800377a:	2301      	movs	r3, #1
 800377c:	4652      	mov	r2, sl
 800377e:	4649      	mov	r1, r9
 8003780:	4638      	mov	r0, r7
 8003782:	47c0      	blx	r8
 8003784:	3001      	adds	r0, #1
 8003786:	d103      	bne.n	8003790 <_printf_common+0xac>
 8003788:	f04f 30ff 	mov.w	r0, #4294967295
 800378c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003790:	3501      	adds	r5, #1
 8003792:	e7c6      	b.n	8003722 <_printf_common+0x3e>
 8003794:	18e1      	adds	r1, r4, r3
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	2030      	movs	r0, #48	; 0x30
 800379a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800379e:	4422      	add	r2, r4
 80037a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037a8:	3302      	adds	r3, #2
 80037aa:	e7c7      	b.n	800373c <_printf_common+0x58>
 80037ac:	2301      	movs	r3, #1
 80037ae:	4622      	mov	r2, r4
 80037b0:	4649      	mov	r1, r9
 80037b2:	4638      	mov	r0, r7
 80037b4:	47c0      	blx	r8
 80037b6:	3001      	adds	r0, #1
 80037b8:	d0e6      	beq.n	8003788 <_printf_common+0xa4>
 80037ba:	3601      	adds	r6, #1
 80037bc:	e7d9      	b.n	8003772 <_printf_common+0x8e>
	...

080037c0 <_printf_i>:
 80037c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037c4:	7e0f      	ldrb	r7, [r1, #24]
 80037c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80037c8:	2f78      	cmp	r7, #120	; 0x78
 80037ca:	4691      	mov	r9, r2
 80037cc:	4680      	mov	r8, r0
 80037ce:	460c      	mov	r4, r1
 80037d0:	469a      	mov	sl, r3
 80037d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80037d6:	d807      	bhi.n	80037e8 <_printf_i+0x28>
 80037d8:	2f62      	cmp	r7, #98	; 0x62
 80037da:	d80a      	bhi.n	80037f2 <_printf_i+0x32>
 80037dc:	2f00      	cmp	r7, #0
 80037de:	f000 80d4 	beq.w	800398a <_printf_i+0x1ca>
 80037e2:	2f58      	cmp	r7, #88	; 0x58
 80037e4:	f000 80c0 	beq.w	8003968 <_printf_i+0x1a8>
 80037e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037f0:	e03a      	b.n	8003868 <_printf_i+0xa8>
 80037f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037f6:	2b15      	cmp	r3, #21
 80037f8:	d8f6      	bhi.n	80037e8 <_printf_i+0x28>
 80037fa:	a101      	add	r1, pc, #4	; (adr r1, 8003800 <_printf_i+0x40>)
 80037fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003800:	08003859 	.word	0x08003859
 8003804:	0800386d 	.word	0x0800386d
 8003808:	080037e9 	.word	0x080037e9
 800380c:	080037e9 	.word	0x080037e9
 8003810:	080037e9 	.word	0x080037e9
 8003814:	080037e9 	.word	0x080037e9
 8003818:	0800386d 	.word	0x0800386d
 800381c:	080037e9 	.word	0x080037e9
 8003820:	080037e9 	.word	0x080037e9
 8003824:	080037e9 	.word	0x080037e9
 8003828:	080037e9 	.word	0x080037e9
 800382c:	08003971 	.word	0x08003971
 8003830:	08003899 	.word	0x08003899
 8003834:	0800392b 	.word	0x0800392b
 8003838:	080037e9 	.word	0x080037e9
 800383c:	080037e9 	.word	0x080037e9
 8003840:	08003993 	.word	0x08003993
 8003844:	080037e9 	.word	0x080037e9
 8003848:	08003899 	.word	0x08003899
 800384c:	080037e9 	.word	0x080037e9
 8003850:	080037e9 	.word	0x080037e9
 8003854:	08003933 	.word	0x08003933
 8003858:	682b      	ldr	r3, [r5, #0]
 800385a:	1d1a      	adds	r2, r3, #4
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	602a      	str	r2, [r5, #0]
 8003860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003864:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003868:	2301      	movs	r3, #1
 800386a:	e09f      	b.n	80039ac <_printf_i+0x1ec>
 800386c:	6820      	ldr	r0, [r4, #0]
 800386e:	682b      	ldr	r3, [r5, #0]
 8003870:	0607      	lsls	r7, r0, #24
 8003872:	f103 0104 	add.w	r1, r3, #4
 8003876:	6029      	str	r1, [r5, #0]
 8003878:	d501      	bpl.n	800387e <_printf_i+0xbe>
 800387a:	681e      	ldr	r6, [r3, #0]
 800387c:	e003      	b.n	8003886 <_printf_i+0xc6>
 800387e:	0646      	lsls	r6, r0, #25
 8003880:	d5fb      	bpl.n	800387a <_printf_i+0xba>
 8003882:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003886:	2e00      	cmp	r6, #0
 8003888:	da03      	bge.n	8003892 <_printf_i+0xd2>
 800388a:	232d      	movs	r3, #45	; 0x2d
 800388c:	4276      	negs	r6, r6
 800388e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003892:	485a      	ldr	r0, [pc, #360]	; (80039fc <_printf_i+0x23c>)
 8003894:	230a      	movs	r3, #10
 8003896:	e012      	b.n	80038be <_printf_i+0xfe>
 8003898:	682b      	ldr	r3, [r5, #0]
 800389a:	6820      	ldr	r0, [r4, #0]
 800389c:	1d19      	adds	r1, r3, #4
 800389e:	6029      	str	r1, [r5, #0]
 80038a0:	0605      	lsls	r5, r0, #24
 80038a2:	d501      	bpl.n	80038a8 <_printf_i+0xe8>
 80038a4:	681e      	ldr	r6, [r3, #0]
 80038a6:	e002      	b.n	80038ae <_printf_i+0xee>
 80038a8:	0641      	lsls	r1, r0, #25
 80038aa:	d5fb      	bpl.n	80038a4 <_printf_i+0xe4>
 80038ac:	881e      	ldrh	r6, [r3, #0]
 80038ae:	4853      	ldr	r0, [pc, #332]	; (80039fc <_printf_i+0x23c>)
 80038b0:	2f6f      	cmp	r7, #111	; 0x6f
 80038b2:	bf0c      	ite	eq
 80038b4:	2308      	moveq	r3, #8
 80038b6:	230a      	movne	r3, #10
 80038b8:	2100      	movs	r1, #0
 80038ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038be:	6865      	ldr	r5, [r4, #4]
 80038c0:	60a5      	str	r5, [r4, #8]
 80038c2:	2d00      	cmp	r5, #0
 80038c4:	bfa2      	ittt	ge
 80038c6:	6821      	ldrge	r1, [r4, #0]
 80038c8:	f021 0104 	bicge.w	r1, r1, #4
 80038cc:	6021      	strge	r1, [r4, #0]
 80038ce:	b90e      	cbnz	r6, 80038d4 <_printf_i+0x114>
 80038d0:	2d00      	cmp	r5, #0
 80038d2:	d04b      	beq.n	800396c <_printf_i+0x1ac>
 80038d4:	4615      	mov	r5, r2
 80038d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80038da:	fb03 6711 	mls	r7, r3, r1, r6
 80038de:	5dc7      	ldrb	r7, [r0, r7]
 80038e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80038e4:	4637      	mov	r7, r6
 80038e6:	42bb      	cmp	r3, r7
 80038e8:	460e      	mov	r6, r1
 80038ea:	d9f4      	bls.n	80038d6 <_printf_i+0x116>
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d10b      	bne.n	8003908 <_printf_i+0x148>
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	07de      	lsls	r6, r3, #31
 80038f4:	d508      	bpl.n	8003908 <_printf_i+0x148>
 80038f6:	6923      	ldr	r3, [r4, #16]
 80038f8:	6861      	ldr	r1, [r4, #4]
 80038fa:	4299      	cmp	r1, r3
 80038fc:	bfde      	ittt	le
 80038fe:	2330      	movle	r3, #48	; 0x30
 8003900:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003904:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003908:	1b52      	subs	r2, r2, r5
 800390a:	6122      	str	r2, [r4, #16]
 800390c:	f8cd a000 	str.w	sl, [sp]
 8003910:	464b      	mov	r3, r9
 8003912:	aa03      	add	r2, sp, #12
 8003914:	4621      	mov	r1, r4
 8003916:	4640      	mov	r0, r8
 8003918:	f7ff fee4 	bl	80036e4 <_printf_common>
 800391c:	3001      	adds	r0, #1
 800391e:	d14a      	bne.n	80039b6 <_printf_i+0x1f6>
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	b004      	add	sp, #16
 8003926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	f043 0320 	orr.w	r3, r3, #32
 8003930:	6023      	str	r3, [r4, #0]
 8003932:	4833      	ldr	r0, [pc, #204]	; (8003a00 <_printf_i+0x240>)
 8003934:	2778      	movs	r7, #120	; 0x78
 8003936:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	6829      	ldr	r1, [r5, #0]
 800393e:	061f      	lsls	r7, r3, #24
 8003940:	f851 6b04 	ldr.w	r6, [r1], #4
 8003944:	d402      	bmi.n	800394c <_printf_i+0x18c>
 8003946:	065f      	lsls	r7, r3, #25
 8003948:	bf48      	it	mi
 800394a:	b2b6      	uxthmi	r6, r6
 800394c:	07df      	lsls	r7, r3, #31
 800394e:	bf48      	it	mi
 8003950:	f043 0320 	orrmi.w	r3, r3, #32
 8003954:	6029      	str	r1, [r5, #0]
 8003956:	bf48      	it	mi
 8003958:	6023      	strmi	r3, [r4, #0]
 800395a:	b91e      	cbnz	r6, 8003964 <_printf_i+0x1a4>
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	f023 0320 	bic.w	r3, r3, #32
 8003962:	6023      	str	r3, [r4, #0]
 8003964:	2310      	movs	r3, #16
 8003966:	e7a7      	b.n	80038b8 <_printf_i+0xf8>
 8003968:	4824      	ldr	r0, [pc, #144]	; (80039fc <_printf_i+0x23c>)
 800396a:	e7e4      	b.n	8003936 <_printf_i+0x176>
 800396c:	4615      	mov	r5, r2
 800396e:	e7bd      	b.n	80038ec <_printf_i+0x12c>
 8003970:	682b      	ldr	r3, [r5, #0]
 8003972:	6826      	ldr	r6, [r4, #0]
 8003974:	6961      	ldr	r1, [r4, #20]
 8003976:	1d18      	adds	r0, r3, #4
 8003978:	6028      	str	r0, [r5, #0]
 800397a:	0635      	lsls	r5, r6, #24
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	d501      	bpl.n	8003984 <_printf_i+0x1c4>
 8003980:	6019      	str	r1, [r3, #0]
 8003982:	e002      	b.n	800398a <_printf_i+0x1ca>
 8003984:	0670      	lsls	r0, r6, #25
 8003986:	d5fb      	bpl.n	8003980 <_printf_i+0x1c0>
 8003988:	8019      	strh	r1, [r3, #0]
 800398a:	2300      	movs	r3, #0
 800398c:	6123      	str	r3, [r4, #16]
 800398e:	4615      	mov	r5, r2
 8003990:	e7bc      	b.n	800390c <_printf_i+0x14c>
 8003992:	682b      	ldr	r3, [r5, #0]
 8003994:	1d1a      	adds	r2, r3, #4
 8003996:	602a      	str	r2, [r5, #0]
 8003998:	681d      	ldr	r5, [r3, #0]
 800399a:	6862      	ldr	r2, [r4, #4]
 800399c:	2100      	movs	r1, #0
 800399e:	4628      	mov	r0, r5
 80039a0:	f7fc fc1e 	bl	80001e0 <memchr>
 80039a4:	b108      	cbz	r0, 80039aa <_printf_i+0x1ea>
 80039a6:	1b40      	subs	r0, r0, r5
 80039a8:	6060      	str	r0, [r4, #4]
 80039aa:	6863      	ldr	r3, [r4, #4]
 80039ac:	6123      	str	r3, [r4, #16]
 80039ae:	2300      	movs	r3, #0
 80039b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039b4:	e7aa      	b.n	800390c <_printf_i+0x14c>
 80039b6:	6923      	ldr	r3, [r4, #16]
 80039b8:	462a      	mov	r2, r5
 80039ba:	4649      	mov	r1, r9
 80039bc:	4640      	mov	r0, r8
 80039be:	47d0      	blx	sl
 80039c0:	3001      	adds	r0, #1
 80039c2:	d0ad      	beq.n	8003920 <_printf_i+0x160>
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	079b      	lsls	r3, r3, #30
 80039c8:	d413      	bmi.n	80039f2 <_printf_i+0x232>
 80039ca:	68e0      	ldr	r0, [r4, #12]
 80039cc:	9b03      	ldr	r3, [sp, #12]
 80039ce:	4298      	cmp	r0, r3
 80039d0:	bfb8      	it	lt
 80039d2:	4618      	movlt	r0, r3
 80039d4:	e7a6      	b.n	8003924 <_printf_i+0x164>
 80039d6:	2301      	movs	r3, #1
 80039d8:	4632      	mov	r2, r6
 80039da:	4649      	mov	r1, r9
 80039dc:	4640      	mov	r0, r8
 80039de:	47d0      	blx	sl
 80039e0:	3001      	adds	r0, #1
 80039e2:	d09d      	beq.n	8003920 <_printf_i+0x160>
 80039e4:	3501      	adds	r5, #1
 80039e6:	68e3      	ldr	r3, [r4, #12]
 80039e8:	9903      	ldr	r1, [sp, #12]
 80039ea:	1a5b      	subs	r3, r3, r1
 80039ec:	42ab      	cmp	r3, r5
 80039ee:	dcf2      	bgt.n	80039d6 <_printf_i+0x216>
 80039f0:	e7eb      	b.n	80039ca <_printf_i+0x20a>
 80039f2:	2500      	movs	r5, #0
 80039f4:	f104 0619 	add.w	r6, r4, #25
 80039f8:	e7f5      	b.n	80039e6 <_printf_i+0x226>
 80039fa:	bf00      	nop
 80039fc:	08003df9 	.word	0x08003df9
 8003a00:	08003e0a 	.word	0x08003e0a

08003a04 <__sflush_r>:
 8003a04:	898a      	ldrh	r2, [r1, #12]
 8003a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a0a:	4605      	mov	r5, r0
 8003a0c:	0710      	lsls	r0, r2, #28
 8003a0e:	460c      	mov	r4, r1
 8003a10:	d458      	bmi.n	8003ac4 <__sflush_r+0xc0>
 8003a12:	684b      	ldr	r3, [r1, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	dc05      	bgt.n	8003a24 <__sflush_r+0x20>
 8003a18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	dc02      	bgt.n	8003a24 <__sflush_r+0x20>
 8003a1e:	2000      	movs	r0, #0
 8003a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a26:	2e00      	cmp	r6, #0
 8003a28:	d0f9      	beq.n	8003a1e <__sflush_r+0x1a>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003a30:	682f      	ldr	r7, [r5, #0]
 8003a32:	6a21      	ldr	r1, [r4, #32]
 8003a34:	602b      	str	r3, [r5, #0]
 8003a36:	d032      	beq.n	8003a9e <__sflush_r+0x9a>
 8003a38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a3a:	89a3      	ldrh	r3, [r4, #12]
 8003a3c:	075a      	lsls	r2, r3, #29
 8003a3e:	d505      	bpl.n	8003a4c <__sflush_r+0x48>
 8003a40:	6863      	ldr	r3, [r4, #4]
 8003a42:	1ac0      	subs	r0, r0, r3
 8003a44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a46:	b10b      	cbz	r3, 8003a4c <__sflush_r+0x48>
 8003a48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a4a:	1ac0      	subs	r0, r0, r3
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	4602      	mov	r2, r0
 8003a50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003a52:	6a21      	ldr	r1, [r4, #32]
 8003a54:	4628      	mov	r0, r5
 8003a56:	47b0      	blx	r6
 8003a58:	1c43      	adds	r3, r0, #1
 8003a5a:	89a3      	ldrh	r3, [r4, #12]
 8003a5c:	d106      	bne.n	8003a6c <__sflush_r+0x68>
 8003a5e:	6829      	ldr	r1, [r5, #0]
 8003a60:	291d      	cmp	r1, #29
 8003a62:	d82b      	bhi.n	8003abc <__sflush_r+0xb8>
 8003a64:	4a29      	ldr	r2, [pc, #164]	; (8003b0c <__sflush_r+0x108>)
 8003a66:	410a      	asrs	r2, r1
 8003a68:	07d6      	lsls	r6, r2, #31
 8003a6a:	d427      	bmi.n	8003abc <__sflush_r+0xb8>
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	6062      	str	r2, [r4, #4]
 8003a70:	04d9      	lsls	r1, r3, #19
 8003a72:	6922      	ldr	r2, [r4, #16]
 8003a74:	6022      	str	r2, [r4, #0]
 8003a76:	d504      	bpl.n	8003a82 <__sflush_r+0x7e>
 8003a78:	1c42      	adds	r2, r0, #1
 8003a7a:	d101      	bne.n	8003a80 <__sflush_r+0x7c>
 8003a7c:	682b      	ldr	r3, [r5, #0]
 8003a7e:	b903      	cbnz	r3, 8003a82 <__sflush_r+0x7e>
 8003a80:	6560      	str	r0, [r4, #84]	; 0x54
 8003a82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a84:	602f      	str	r7, [r5, #0]
 8003a86:	2900      	cmp	r1, #0
 8003a88:	d0c9      	beq.n	8003a1e <__sflush_r+0x1a>
 8003a8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a8e:	4299      	cmp	r1, r3
 8003a90:	d002      	beq.n	8003a98 <__sflush_r+0x94>
 8003a92:	4628      	mov	r0, r5
 8003a94:	f7ff fbea 	bl	800326c <_free_r>
 8003a98:	2000      	movs	r0, #0
 8003a9a:	6360      	str	r0, [r4, #52]	; 0x34
 8003a9c:	e7c0      	b.n	8003a20 <__sflush_r+0x1c>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	47b0      	blx	r6
 8003aa4:	1c41      	adds	r1, r0, #1
 8003aa6:	d1c8      	bne.n	8003a3a <__sflush_r+0x36>
 8003aa8:	682b      	ldr	r3, [r5, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0c5      	beq.n	8003a3a <__sflush_r+0x36>
 8003aae:	2b1d      	cmp	r3, #29
 8003ab0:	d001      	beq.n	8003ab6 <__sflush_r+0xb2>
 8003ab2:	2b16      	cmp	r3, #22
 8003ab4:	d101      	bne.n	8003aba <__sflush_r+0xb6>
 8003ab6:	602f      	str	r7, [r5, #0]
 8003ab8:	e7b1      	b.n	8003a1e <__sflush_r+0x1a>
 8003aba:	89a3      	ldrh	r3, [r4, #12]
 8003abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ac0:	81a3      	strh	r3, [r4, #12]
 8003ac2:	e7ad      	b.n	8003a20 <__sflush_r+0x1c>
 8003ac4:	690f      	ldr	r7, [r1, #16]
 8003ac6:	2f00      	cmp	r7, #0
 8003ac8:	d0a9      	beq.n	8003a1e <__sflush_r+0x1a>
 8003aca:	0793      	lsls	r3, r2, #30
 8003acc:	680e      	ldr	r6, [r1, #0]
 8003ace:	bf08      	it	eq
 8003ad0:	694b      	ldreq	r3, [r1, #20]
 8003ad2:	600f      	str	r7, [r1, #0]
 8003ad4:	bf18      	it	ne
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	eba6 0807 	sub.w	r8, r6, r7
 8003adc:	608b      	str	r3, [r1, #8]
 8003ade:	f1b8 0f00 	cmp.w	r8, #0
 8003ae2:	dd9c      	ble.n	8003a1e <__sflush_r+0x1a>
 8003ae4:	6a21      	ldr	r1, [r4, #32]
 8003ae6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ae8:	4643      	mov	r3, r8
 8003aea:	463a      	mov	r2, r7
 8003aec:	4628      	mov	r0, r5
 8003aee:	47b0      	blx	r6
 8003af0:	2800      	cmp	r0, #0
 8003af2:	dc06      	bgt.n	8003b02 <__sflush_r+0xfe>
 8003af4:	89a3      	ldrh	r3, [r4, #12]
 8003af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003afa:	81a3      	strh	r3, [r4, #12]
 8003afc:	f04f 30ff 	mov.w	r0, #4294967295
 8003b00:	e78e      	b.n	8003a20 <__sflush_r+0x1c>
 8003b02:	4407      	add	r7, r0
 8003b04:	eba8 0800 	sub.w	r8, r8, r0
 8003b08:	e7e9      	b.n	8003ade <__sflush_r+0xda>
 8003b0a:	bf00      	nop
 8003b0c:	dfbffffe 	.word	0xdfbffffe

08003b10 <_fflush_r>:
 8003b10:	b538      	push	{r3, r4, r5, lr}
 8003b12:	690b      	ldr	r3, [r1, #16]
 8003b14:	4605      	mov	r5, r0
 8003b16:	460c      	mov	r4, r1
 8003b18:	b913      	cbnz	r3, 8003b20 <_fflush_r+0x10>
 8003b1a:	2500      	movs	r5, #0
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	bd38      	pop	{r3, r4, r5, pc}
 8003b20:	b118      	cbz	r0, 8003b2a <_fflush_r+0x1a>
 8003b22:	6a03      	ldr	r3, [r0, #32]
 8003b24:	b90b      	cbnz	r3, 8003b2a <_fflush_r+0x1a>
 8003b26:	f7ff fa99 	bl	800305c <__sinit>
 8003b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f3      	beq.n	8003b1a <_fflush_r+0xa>
 8003b32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003b34:	07d0      	lsls	r0, r2, #31
 8003b36:	d404      	bmi.n	8003b42 <_fflush_r+0x32>
 8003b38:	0599      	lsls	r1, r3, #22
 8003b3a:	d402      	bmi.n	8003b42 <_fflush_r+0x32>
 8003b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b3e:	f7ff fb92 	bl	8003266 <__retarget_lock_acquire_recursive>
 8003b42:	4628      	mov	r0, r5
 8003b44:	4621      	mov	r1, r4
 8003b46:	f7ff ff5d 	bl	8003a04 <__sflush_r>
 8003b4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b4c:	07da      	lsls	r2, r3, #31
 8003b4e:	4605      	mov	r5, r0
 8003b50:	d4e4      	bmi.n	8003b1c <_fflush_r+0xc>
 8003b52:	89a3      	ldrh	r3, [r4, #12]
 8003b54:	059b      	lsls	r3, r3, #22
 8003b56:	d4e1      	bmi.n	8003b1c <_fflush_r+0xc>
 8003b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b5a:	f7ff fb85 	bl	8003268 <__retarget_lock_release_recursive>
 8003b5e:	e7dd      	b.n	8003b1c <_fflush_r+0xc>

08003b60 <__swbuf_r>:
 8003b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b62:	460e      	mov	r6, r1
 8003b64:	4614      	mov	r4, r2
 8003b66:	4605      	mov	r5, r0
 8003b68:	b118      	cbz	r0, 8003b72 <__swbuf_r+0x12>
 8003b6a:	6a03      	ldr	r3, [r0, #32]
 8003b6c:	b90b      	cbnz	r3, 8003b72 <__swbuf_r+0x12>
 8003b6e:	f7ff fa75 	bl	800305c <__sinit>
 8003b72:	69a3      	ldr	r3, [r4, #24]
 8003b74:	60a3      	str	r3, [r4, #8]
 8003b76:	89a3      	ldrh	r3, [r4, #12]
 8003b78:	071a      	lsls	r2, r3, #28
 8003b7a:	d525      	bpl.n	8003bc8 <__swbuf_r+0x68>
 8003b7c:	6923      	ldr	r3, [r4, #16]
 8003b7e:	b31b      	cbz	r3, 8003bc8 <__swbuf_r+0x68>
 8003b80:	6823      	ldr	r3, [r4, #0]
 8003b82:	6922      	ldr	r2, [r4, #16]
 8003b84:	1a98      	subs	r0, r3, r2
 8003b86:	6963      	ldr	r3, [r4, #20]
 8003b88:	b2f6      	uxtb	r6, r6
 8003b8a:	4283      	cmp	r3, r0
 8003b8c:	4637      	mov	r7, r6
 8003b8e:	dc04      	bgt.n	8003b9a <__swbuf_r+0x3a>
 8003b90:	4621      	mov	r1, r4
 8003b92:	4628      	mov	r0, r5
 8003b94:	f7ff ffbc 	bl	8003b10 <_fflush_r>
 8003b98:	b9e0      	cbnz	r0, 8003bd4 <__swbuf_r+0x74>
 8003b9a:	68a3      	ldr	r3, [r4, #8]
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	60a3      	str	r3, [r4, #8]
 8003ba0:	6823      	ldr	r3, [r4, #0]
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	6022      	str	r2, [r4, #0]
 8003ba6:	701e      	strb	r6, [r3, #0]
 8003ba8:	6962      	ldr	r2, [r4, #20]
 8003baa:	1c43      	adds	r3, r0, #1
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d004      	beq.n	8003bba <__swbuf_r+0x5a>
 8003bb0:	89a3      	ldrh	r3, [r4, #12]
 8003bb2:	07db      	lsls	r3, r3, #31
 8003bb4:	d506      	bpl.n	8003bc4 <__swbuf_r+0x64>
 8003bb6:	2e0a      	cmp	r6, #10
 8003bb8:	d104      	bne.n	8003bc4 <__swbuf_r+0x64>
 8003bba:	4621      	mov	r1, r4
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	f7ff ffa7 	bl	8003b10 <_fflush_r>
 8003bc2:	b938      	cbnz	r0, 8003bd4 <__swbuf_r+0x74>
 8003bc4:	4638      	mov	r0, r7
 8003bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bc8:	4621      	mov	r1, r4
 8003bca:	4628      	mov	r0, r5
 8003bcc:	f000 f806 	bl	8003bdc <__swsetup_r>
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	d0d5      	beq.n	8003b80 <__swbuf_r+0x20>
 8003bd4:	f04f 37ff 	mov.w	r7, #4294967295
 8003bd8:	e7f4      	b.n	8003bc4 <__swbuf_r+0x64>
	...

08003bdc <__swsetup_r>:
 8003bdc:	b538      	push	{r3, r4, r5, lr}
 8003bde:	4b2a      	ldr	r3, [pc, #168]	; (8003c88 <__swsetup_r+0xac>)
 8003be0:	4605      	mov	r5, r0
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	460c      	mov	r4, r1
 8003be6:	b118      	cbz	r0, 8003bf0 <__swsetup_r+0x14>
 8003be8:	6a03      	ldr	r3, [r0, #32]
 8003bea:	b90b      	cbnz	r3, 8003bf0 <__swsetup_r+0x14>
 8003bec:	f7ff fa36 	bl	800305c <__sinit>
 8003bf0:	89a3      	ldrh	r3, [r4, #12]
 8003bf2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003bf6:	0718      	lsls	r0, r3, #28
 8003bf8:	d422      	bmi.n	8003c40 <__swsetup_r+0x64>
 8003bfa:	06d9      	lsls	r1, r3, #27
 8003bfc:	d407      	bmi.n	8003c0e <__swsetup_r+0x32>
 8003bfe:	2309      	movs	r3, #9
 8003c00:	602b      	str	r3, [r5, #0]
 8003c02:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003c06:	81a3      	strh	r3, [r4, #12]
 8003c08:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0c:	e034      	b.n	8003c78 <__swsetup_r+0x9c>
 8003c0e:	0758      	lsls	r0, r3, #29
 8003c10:	d512      	bpl.n	8003c38 <__swsetup_r+0x5c>
 8003c12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c14:	b141      	cbz	r1, 8003c28 <__swsetup_r+0x4c>
 8003c16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c1a:	4299      	cmp	r1, r3
 8003c1c:	d002      	beq.n	8003c24 <__swsetup_r+0x48>
 8003c1e:	4628      	mov	r0, r5
 8003c20:	f7ff fb24 	bl	800326c <_free_r>
 8003c24:	2300      	movs	r3, #0
 8003c26:	6363      	str	r3, [r4, #52]	; 0x34
 8003c28:	89a3      	ldrh	r3, [r4, #12]
 8003c2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003c2e:	81a3      	strh	r3, [r4, #12]
 8003c30:	2300      	movs	r3, #0
 8003c32:	6063      	str	r3, [r4, #4]
 8003c34:	6923      	ldr	r3, [r4, #16]
 8003c36:	6023      	str	r3, [r4, #0]
 8003c38:	89a3      	ldrh	r3, [r4, #12]
 8003c3a:	f043 0308 	orr.w	r3, r3, #8
 8003c3e:	81a3      	strh	r3, [r4, #12]
 8003c40:	6923      	ldr	r3, [r4, #16]
 8003c42:	b94b      	cbnz	r3, 8003c58 <__swsetup_r+0x7c>
 8003c44:	89a3      	ldrh	r3, [r4, #12]
 8003c46:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c4e:	d003      	beq.n	8003c58 <__swsetup_r+0x7c>
 8003c50:	4621      	mov	r1, r4
 8003c52:	4628      	mov	r0, r5
 8003c54:	f000 f850 	bl	8003cf8 <__smakebuf_r>
 8003c58:	89a0      	ldrh	r0, [r4, #12]
 8003c5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c5e:	f010 0301 	ands.w	r3, r0, #1
 8003c62:	d00a      	beq.n	8003c7a <__swsetup_r+0x9e>
 8003c64:	2300      	movs	r3, #0
 8003c66:	60a3      	str	r3, [r4, #8]
 8003c68:	6963      	ldr	r3, [r4, #20]
 8003c6a:	425b      	negs	r3, r3
 8003c6c:	61a3      	str	r3, [r4, #24]
 8003c6e:	6923      	ldr	r3, [r4, #16]
 8003c70:	b943      	cbnz	r3, 8003c84 <__swsetup_r+0xa8>
 8003c72:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003c76:	d1c4      	bne.n	8003c02 <__swsetup_r+0x26>
 8003c78:	bd38      	pop	{r3, r4, r5, pc}
 8003c7a:	0781      	lsls	r1, r0, #30
 8003c7c:	bf58      	it	pl
 8003c7e:	6963      	ldrpl	r3, [r4, #20]
 8003c80:	60a3      	str	r3, [r4, #8]
 8003c82:	e7f4      	b.n	8003c6e <__swsetup_r+0x92>
 8003c84:	2000      	movs	r0, #0
 8003c86:	e7f7      	b.n	8003c78 <__swsetup_r+0x9c>
 8003c88:	20000064 	.word	0x20000064

08003c8c <_sbrk_r>:
 8003c8c:	b538      	push	{r3, r4, r5, lr}
 8003c8e:	4d06      	ldr	r5, [pc, #24]	; (8003ca8 <_sbrk_r+0x1c>)
 8003c90:	2300      	movs	r3, #0
 8003c92:	4604      	mov	r4, r0
 8003c94:	4608      	mov	r0, r1
 8003c96:	602b      	str	r3, [r5, #0]
 8003c98:	f7fc ffb6 	bl	8000c08 <_sbrk>
 8003c9c:	1c43      	adds	r3, r0, #1
 8003c9e:	d102      	bne.n	8003ca6 <_sbrk_r+0x1a>
 8003ca0:	682b      	ldr	r3, [r5, #0]
 8003ca2:	b103      	cbz	r3, 8003ca6 <_sbrk_r+0x1a>
 8003ca4:	6023      	str	r3, [r4, #0]
 8003ca6:	bd38      	pop	{r3, r4, r5, pc}
 8003ca8:	20000364 	.word	0x20000364

08003cac <__swhatbuf_r>:
 8003cac:	b570      	push	{r4, r5, r6, lr}
 8003cae:	460c      	mov	r4, r1
 8003cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb4:	2900      	cmp	r1, #0
 8003cb6:	b096      	sub	sp, #88	; 0x58
 8003cb8:	4615      	mov	r5, r2
 8003cba:	461e      	mov	r6, r3
 8003cbc:	da0d      	bge.n	8003cda <__swhatbuf_r+0x2e>
 8003cbe:	89a3      	ldrh	r3, [r4, #12]
 8003cc0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003cc4:	f04f 0100 	mov.w	r1, #0
 8003cc8:	bf0c      	ite	eq
 8003cca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003cce:	2340      	movne	r3, #64	; 0x40
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	6031      	str	r1, [r6, #0]
 8003cd4:	602b      	str	r3, [r5, #0]
 8003cd6:	b016      	add	sp, #88	; 0x58
 8003cd8:	bd70      	pop	{r4, r5, r6, pc}
 8003cda:	466a      	mov	r2, sp
 8003cdc:	f000 f848 	bl	8003d70 <_fstat_r>
 8003ce0:	2800      	cmp	r0, #0
 8003ce2:	dbec      	blt.n	8003cbe <__swhatbuf_r+0x12>
 8003ce4:	9901      	ldr	r1, [sp, #4]
 8003ce6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003cea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003cee:	4259      	negs	r1, r3
 8003cf0:	4159      	adcs	r1, r3
 8003cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cf6:	e7eb      	b.n	8003cd0 <__swhatbuf_r+0x24>

08003cf8 <__smakebuf_r>:
 8003cf8:	898b      	ldrh	r3, [r1, #12]
 8003cfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003cfc:	079d      	lsls	r5, r3, #30
 8003cfe:	4606      	mov	r6, r0
 8003d00:	460c      	mov	r4, r1
 8003d02:	d507      	bpl.n	8003d14 <__smakebuf_r+0x1c>
 8003d04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003d08:	6023      	str	r3, [r4, #0]
 8003d0a:	6123      	str	r3, [r4, #16]
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	6163      	str	r3, [r4, #20]
 8003d10:	b002      	add	sp, #8
 8003d12:	bd70      	pop	{r4, r5, r6, pc}
 8003d14:	ab01      	add	r3, sp, #4
 8003d16:	466a      	mov	r2, sp
 8003d18:	f7ff ffc8 	bl	8003cac <__swhatbuf_r>
 8003d1c:	9900      	ldr	r1, [sp, #0]
 8003d1e:	4605      	mov	r5, r0
 8003d20:	4630      	mov	r0, r6
 8003d22:	f7ff fb0f 	bl	8003344 <_malloc_r>
 8003d26:	b948      	cbnz	r0, 8003d3c <__smakebuf_r+0x44>
 8003d28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d2c:	059a      	lsls	r2, r3, #22
 8003d2e:	d4ef      	bmi.n	8003d10 <__smakebuf_r+0x18>
 8003d30:	f023 0303 	bic.w	r3, r3, #3
 8003d34:	f043 0302 	orr.w	r3, r3, #2
 8003d38:	81a3      	strh	r3, [r4, #12]
 8003d3a:	e7e3      	b.n	8003d04 <__smakebuf_r+0xc>
 8003d3c:	89a3      	ldrh	r3, [r4, #12]
 8003d3e:	6020      	str	r0, [r4, #0]
 8003d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d44:	81a3      	strh	r3, [r4, #12]
 8003d46:	9b00      	ldr	r3, [sp, #0]
 8003d48:	6163      	str	r3, [r4, #20]
 8003d4a:	9b01      	ldr	r3, [sp, #4]
 8003d4c:	6120      	str	r0, [r4, #16]
 8003d4e:	b15b      	cbz	r3, 8003d68 <__smakebuf_r+0x70>
 8003d50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d54:	4630      	mov	r0, r6
 8003d56:	f000 f81d 	bl	8003d94 <_isatty_r>
 8003d5a:	b128      	cbz	r0, 8003d68 <__smakebuf_r+0x70>
 8003d5c:	89a3      	ldrh	r3, [r4, #12]
 8003d5e:	f023 0303 	bic.w	r3, r3, #3
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	81a3      	strh	r3, [r4, #12]
 8003d68:	89a3      	ldrh	r3, [r4, #12]
 8003d6a:	431d      	orrs	r5, r3
 8003d6c:	81a5      	strh	r5, [r4, #12]
 8003d6e:	e7cf      	b.n	8003d10 <__smakebuf_r+0x18>

08003d70 <_fstat_r>:
 8003d70:	b538      	push	{r3, r4, r5, lr}
 8003d72:	4d07      	ldr	r5, [pc, #28]	; (8003d90 <_fstat_r+0x20>)
 8003d74:	2300      	movs	r3, #0
 8003d76:	4604      	mov	r4, r0
 8003d78:	4608      	mov	r0, r1
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	602b      	str	r3, [r5, #0]
 8003d7e:	f7fc ff1a 	bl	8000bb6 <_fstat>
 8003d82:	1c43      	adds	r3, r0, #1
 8003d84:	d102      	bne.n	8003d8c <_fstat_r+0x1c>
 8003d86:	682b      	ldr	r3, [r5, #0]
 8003d88:	b103      	cbz	r3, 8003d8c <_fstat_r+0x1c>
 8003d8a:	6023      	str	r3, [r4, #0]
 8003d8c:	bd38      	pop	{r3, r4, r5, pc}
 8003d8e:	bf00      	nop
 8003d90:	20000364 	.word	0x20000364

08003d94 <_isatty_r>:
 8003d94:	b538      	push	{r3, r4, r5, lr}
 8003d96:	4d06      	ldr	r5, [pc, #24]	; (8003db0 <_isatty_r+0x1c>)
 8003d98:	2300      	movs	r3, #0
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	4608      	mov	r0, r1
 8003d9e:	602b      	str	r3, [r5, #0]
 8003da0:	f7fc ff19 	bl	8000bd6 <_isatty>
 8003da4:	1c43      	adds	r3, r0, #1
 8003da6:	d102      	bne.n	8003dae <_isatty_r+0x1a>
 8003da8:	682b      	ldr	r3, [r5, #0]
 8003daa:	b103      	cbz	r3, 8003dae <_isatty_r+0x1a>
 8003dac:	6023      	str	r3, [r4, #0]
 8003dae:	bd38      	pop	{r3, r4, r5, pc}
 8003db0:	20000364 	.word	0x20000364

08003db4 <_init>:
 8003db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db6:	bf00      	nop
 8003db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dba:	bc08      	pop	{r3}
 8003dbc:	469e      	mov	lr, r3
 8003dbe:	4770      	bx	lr

08003dc0 <_fini>:
 8003dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc2:	bf00      	nop
 8003dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dc6:	bc08      	pop	{r3}
 8003dc8:	469e      	mov	lr, r3
 8003dca:	4770      	bx	lr
